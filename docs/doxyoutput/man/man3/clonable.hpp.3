.TH "/home/jharwell/git/rcppsw/include/rcppsw/patterns/prototype/clonable.hpp" 3 "Sat Feb 5 2022" "RCPPSW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/jharwell/git/rcppsw/include/rcppsw/patterns/prototype/clonable.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <memory>\fP
.br
\fC#include 'rcppsw/rcppsw\&.hpp'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBrcppsw::patterns::prototype::clonable< T >\fP"
.br
.RI "Define a class as being capable of being cloned (i\&.e\&. a deep copy)\&. I generally prefer this approach when copying objects, because it is explicit and not subject to compiler/language standards around \fBoperator=()\fP, AND because the use of std::unique_ptr makes it clear the returned object has nothing to do with the source object\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBrcppsw\fP"
.br
.RI "The root namespace of the RCPPSW library\&. "
.ti -1c
.RI " \fBrcppsw::patterns\fP"
.br
.RI "Design pattern templates and interfaces\&. "
.ti -1c
.RI " \fBrcppsw::patterns::prototype\fP"
.br
.RI "Prototype design pattern interfaces and classes: clonable, caching factory\&. "
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBCopyright\fP
.RS 4
2017 John Harwell, All rights reserved\&.
.RE
.PP
This file is part of RCPPSW\&.
.PP
RCPPSW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version\&.
.PP
RCPPSW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU General Public License for more details\&.
.PP
You should have received a copy of the GNU General Public License along with RCPPSW\&. If not, see <http://www.gnu.org/licenses/ 
.SH "Author"
.PP 
Generated automatically by Doxygen for RCPPSW from the source code\&.
