.TH "rcppsw::types::spatial_dist" 3 "Sat Feb 5 2022" "RCPPSW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rcppsw::types::spatial_dist \- Specifies a distance in 'real' spatial space, and as such is always positive\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <spatial_dist\&.hpp>\fP
.PP
Inherits \fBrcppsw::types::distance_measure< double, struct spatial_dist_tag >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBspatial_dist\fP (const double &\fBv\fP)"
.br
.ti -1c
.RI "\fBspatial_dist\fP (const \fBspatial_dist\fP &)=default"
.br
.ti -1c
.RI "\fB~spatial_dist\fP (void) override=default"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator*\fP (const \fBspatial_dist\fP &rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator*\fP (double rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator+\fP (const \fBspatial_dist\fP &rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator+\fP (double rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP & \fBoperator+=\fP (const \fBspatial_dist\fP &rhs)"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator\-\fP (const \fBspatial_dist\fP &rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator\-\fP (double rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP & \fBoperator\-=\fP (double rhs)"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator/\fP (const \fBspatial_dist\fP &rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP \fBoperator/\fP (double rhs) const"
.br
.ti -1c
.RI "\fBspatial_dist\fP & \fBoperator=\fP (const \fBspatial_dist\fP &rhs)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBspatial_dist\fP \fBmake\fP (const double &value)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Specifies a distance in 'real' spatial space, and as such is always positive\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "rcppsw::types::spatial_dist::spatial_dist (const double & v)\fC [inline]\fP, \fC [explicit]\fP"

.SS "rcppsw::types::spatial_dist::~spatial_dist (void)\fC [override]\fP, \fC [default]\fP"

.SS "rcppsw::types::spatial_dist::spatial_dist (const \fBspatial_dist\fP &)\fC [default]\fP"

.SH "Member Function Documentation"
.PP 
.SS "static \fBspatial_dist\fP rcppsw::types::spatial_dist::make (const double & value)\fC [static]\fP"
Create a \fBspatial_dist\fP from a numeric value, making it positive if necessary\&. This incurs a higher runtime cost, and so is a separate function from the constructor, which \fIassumes\fP the \fCvalue\fP to be positive semi-definite\&. 
.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator* (const \fBspatial_dist\fP & rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator* (double rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator+ (const \fBspatial_dist\fP & rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator+ (double rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP& rcppsw::types::spatial_dist::operator+= (const \fBspatial_dist\fP & rhs)\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator\- (const \fBspatial_dist\fP & rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator\- (double rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP& rcppsw::types::spatial_dist::operator\-= (double rhs)\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator/ (const \fBspatial_dist\fP & rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP rcppsw::types::spatial_dist::operator/ (double rhs) const\fC [inline]\fP"

.SS "\fBspatial_dist\fP& rcppsw::types::spatial_dist::operator= (const \fBspatial_dist\fP & rhs)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for RCPPSW from the source code\&.
