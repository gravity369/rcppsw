.TH "rcppsw::algorithm::clustering::base_clustering_impl< T, Policy >" 3 "Sat Feb 5 2022" "RCPPSW" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rcppsw::algorithm::clustering::base_clustering_impl< T, Policy > \- Templated class interface to guide the implementation of various clustering algorithms by giving them a necessary set of functions to implement so that they can be then run in an implementation agnostic way\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <base_clustering_impl\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBcluster_type\fP = typename \fBcluster::mapping\fP< T, Policy >::type"
.br
.ti -1c
.RI "using \fBcluster_vector\fP = std::vector< \fBcluster_type\fP >"
.br
.ti -1c
.RI "using \fBdist_calc_ftype\fP = std::function< double(const T &, const T &)>"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~base_clustering_impl\fP (void)=default"
.br
.ti -1c
.RI "virtual bool \fBconverged\fP (const \fBcluster_vector\fP &clusters) const =0"
.br
.RI "Determine if the clusters have converged and the algorithm should be terminated\&. "
.ti -1c
.RI "virtual void \fBinitialize\fP (std::vector< T > *data, \fBmembership_type\fP< Policy > *membership)=0"
.br
.RI "Perform algorithm-specific clustering initialization (memory localization, etc\&.)\&. "
.ti -1c
.RI "virtual void \fBiterate\fP (const std::vector< T > &data, const \fBdist_calc_ftype\fP &dist_func, \fBcluster_vector\fP *clusters)=0"
.br
.ti -1c
.RI "virtual void \fBpost_iter_update\fP (\fBcluster_vector\fP *clusters)=0"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T, typename Policy>
.br
interface rcppsw::algorithm::clustering::base_clustering_impl< T, Policy >"
Templated class interface to guide the implementation of various clustering algorithms by giving them a necessary set of functions to implement so that they can be then run in an implementation agnostic way\&. 
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename T , typename Policy > using \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::\fBcluster_type\fP =  typename \fBcluster::mapping\fP<T, Policy>::type"

.SS "template<typename T , typename Policy > using \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::\fBcluster_vector\fP =  std::vector<\fBcluster_type\fP>"

.SS "template<typename T , typename Policy > using \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::\fBdist_calc_ftype\fP =  std::function<double(const T&, const T&)>"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T , typename Policy > virtual \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::~\fBbase_clustering_impl\fP (void)\fC [virtual]\fP, \fC [default]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename T , typename Policy > virtual bool \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::converged (const \fBcluster_vector\fP & clusters) const\fC [pure virtual]\fP"

.PP
Determine if the clusters have converged and the algorithm should be terminated\&. 
.PP
\fBReturns\fP
.RS 4
\fCTRUE\fP if the algorithm has converged, \fCFALSE\fP otherwise\&. 
.RE
.PP

.PP
Implemented in \fBrcppsw::algorithm::clustering::kmeans_omp< T >\fP, and \fBrcppsw::algorithm::clustering::entropy_eh_omp< T >\fP\&.
.SS "template<typename T , typename Policy > virtual void \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::initialize (std::vector< T > * data, \fBmembership_type\fP< Policy > * membership)\fC [pure virtual]\fP"

.PP
Perform algorithm-specific clustering initialization (memory localization, etc\&.)\&. 
.PP
Implemented in \fBrcppsw::algorithm::clustering::kmeans_omp< T >\fP, and \fBrcppsw::algorithm::clustering::entropy_eh_omp< T >\fP\&.
.SS "template<typename T , typename Policy > virtual void \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::iterate (const std::vector< T > & data, const \fBdist_calc_ftype\fP & dist_func, \fBcluster_vector\fP * clusters)\fC [pure virtual]\fP"

.PP
Implemented in \fBrcppsw::algorithm::clustering::kmeans_omp< T >\fP, and \fBrcppsw::algorithm::clustering::entropy_eh_omp< T >\fP\&.
.SS "template<typename T , typename Policy > virtual void \fBrcppsw::algorithm::clustering::base_clustering_impl\fP< T, Policy >::post_iter_update (\fBcluster_vector\fP * clusters)\fC [pure virtual]\fP"

.PP
Implemented in \fBrcppsw::algorithm::clustering::entropy_eh_omp< T >\fP, and \fBrcppsw::algorithm::clustering::kmeans_omp< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for RCPPSW from the source code\&.
