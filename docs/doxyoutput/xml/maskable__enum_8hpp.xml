<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="maskable__enum_8hpp" kind="file" language="C++">
    <compoundname>maskable_enum.hpp</compoundname>
    <includes local="no">type_traits</includes>
    <includes refid="rcppsw_8hpp" local="yes">rcppsw/rcppsw.hpp</includes>
    <includedby refid="file__sink__registerer_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/metrics/file_sink_registerer.hpp</includedby>
    <includedby refid="network__sink__registerer_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_sink_registerer.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp</label>
        <link refid="maskable__enum_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>rcsw/common/common.h</label>
        <link refid="common_8h.html" external="/home/jharwell/git/rcppsw/build/docs/rcsw/RCSW.tag"/>
      </node>
      <node id="4">
        <label>rcppsw/common/common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="3">
        <label>rcppsw/rcppsw.hpp</label>
        <link refid="rcppsw_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rcppsw/mpl/mpl.hpp</label>
        <link refid="mpl_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>rcppsw/common/macros.hpp</label>
        <link refid="common_2macros_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp</label>
        <link refid="maskable__enum_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/file_sink_registerer.hpp</label>
        <link refid="file__sink__registerer_8hpp"/>
      </node>
      <node id="3">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_sink_registerer.hpp</label>
        <link refid="network__sink__registerer_8hpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="maskable__enum_8hpp_1a2ec269e3d39fc42c5a524b45faf80d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TEnum</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(std::is_enum&lt; TEnum &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&amp;</definition>
        <argsstring>(const TEnum &amp;lhs, const TEnum &amp;rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const TEnum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TEnum &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" line="41" column="7" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="maskable__enum_8hpp_1a46e32f06110882befc652ba90ed4162a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TEnum</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(std::is_enum&lt; TEnum &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>TEnum</type>
        <definition>TEnum operator|</definition>
        <argsstring>(const TEnum &amp;lhs, const TEnum &amp;rhs)</argsstring>
        <name>operator|</name>
        <param>
          <type>const TEnum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TEnum &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" line="35" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="maskable__enum_8hpp_1ac9eaf2565d5e20933532111a4dabc756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TEnum</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(std::is_enum&lt; TEnum &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>TEnum</type>
        <definition>TEnum operator|=</definition>
        <argsstring>(TEnum &amp;lhs, const TEnum &amp;rhs)</argsstring>
        <name>operator|=</name>
        <param>
          <type>TEnum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TEnum &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" line="47" column="7" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp" bodystart="47" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2019 John Harwell, All rights reserved.</para>
</simplesect>
This file is part of RCPPSW.</para>
<para>RCPPSW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para>
<para>RCPPSW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para>
<para>You should have received a copy of the GNU General Public License along with RCPPSW. If not, see &lt;<ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_RCPPSW_UTILS_MASKABLE_ENUM_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_RCPPSW_UTILS_MASKABLE_ENUM_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rcppsw_8hpp" kindref="compound">rcppsw/rcppsw.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Templates</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_enum&lt;TEnum&gt;::value)&gt;</highlight></codeline>
<codeline lineno="35" refid="maskable__enum_8hpp_1a46e32f06110882befc652ba90ed4162a" refkind="member"><highlight class="normal"><ref refid="common_2macros_8hpp_1a080d8af20d6aa955d4db7ef068309a7c" kindref="member">RCPPSW_PURE</ref><sp/>TEnum<sp/><ref refid="maskable__enum_8hpp_1a46e32f06110882befc652ba90ed4162a" kindref="member">operator|</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEnum&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEnum&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::underlying_type_t&lt;TEnum&gt;;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_enum&lt;TEnum&gt;::value)&gt;</highlight></codeline>
<codeline lineno="41" refid="maskable__enum_8hpp_1a2ec269e3d39fc42c5a524b45faf80d31" refkind="member"><highlight class="normal"><ref refid="common_2macros_8hpp_1a080d8af20d6aa955d4db7ef068309a7c" kindref="member">RCPPSW_PURE</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maskable__enum_8hpp_1a2ec269e3d39fc42c5a524b45faf80d31" kindref="member">operator&amp;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEnum&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEnum&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::underlying_type_t&lt;TEnum&gt;;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_enum&lt;TEnum&gt;::value)&gt;</highlight></codeline>
<codeline lineno="47" refid="maskable__enum_8hpp_1ac9eaf2565d5e20933532111a4dabc756" refkind="member"><highlight class="normal">TEnum<sp/><ref refid="maskable__enum_8hpp_1ac9eaf2565d5e20933532111a4dabc756" kindref="member">operator|=</ref>(TEnum&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEnum&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>lhs<sp/>|<sp/>rhs;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_RCPPSW_COMMON_MASKABLE_ENUM_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/utils/maskable_enum.hpp"/>
  </compounddef>
</doxygen>
