<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans" kind="class" language="C++" prot="public">
    <compoundname>rcppsw::algorithm::clustering::kmeans</compoundname>
    <basecompoundref refid="classrcppsw_1_1er_1_1client" prot="public" virt="non-virtual">rcppsw::er::client&lt; kmeans&lt; T &gt; &gt;</basecompoundref>
    <includes refid="kmeans_8hpp" local="no">kmeans.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab60d2b177e97789ce7f6eee447f5cf2d" prot="public" static="no">
        <type>typename <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kindref="compound">base_clustering_impl</ref>&lt; T, <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt;::<ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab60d2b177e97789ce7f6eee447f5cf2d" kindref="member">cluster_vector</ref></type>
        <definition>using rcppsw::algorithm::clustering::kmeans&lt; T &gt;::cluster_vector =  typename base_clustering_impl&lt; T, policy::NC&gt;::cluster_vector</definition>
        <argsstring></argsstring>
        <name>cluster_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="64" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad3b17da5d28333b05bdc287af92202b5" prot="public" static="no">
        <type>typename <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kindref="compound">base_clustering_impl</ref>&lt; T, <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt;::<ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad3b17da5d28333b05bdc287af92202b5" kindref="member">dist_calc_ftype</ref></type>
        <definition>using rcppsw::algorithm::clustering::kmeans&lt; T &gt;::dist_calc_ftype =  typename base_clustering_impl&lt; T, policy::NC&gt;::dist_calc_ftype</definition>
        <argsstring></argsstring>
        <name>dist_calc_ftype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="67" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1aa053026eecff5068c9e8519054f62e70" prot="private" static="no">
        <type>typename <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kindref="compound">base_clustering_impl</ref>&lt; T, <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt;::cluster_type</type>
        <definition>using rcppsw::algorithm::clustering::kmeans&lt; T &gt;::cluster_type =  typename base_clustering_impl&lt; T, policy::NC&gt;::cluster_type</definition>
        <argsstring></argsstring>
        <name>cluster_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="143" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1afc6731b7b29469e969c0e82775d4b1e6" prot="private" static="no" mutable="no">
        <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab60d2b177e97789ce7f6eee447f5cf2d" kindref="member">cluster_vector</ref></type>
        <definition>cluster_vector rcppsw::algorithm::clustering::kmeans&lt; T &gt;::m_clusters</definition>
        <argsstring></argsstring>
        <name>m_clusters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="166" column="61" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a06f80beaca9832924420944410aef67e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; rcppsw::algorithm::clustering::kmeans&lt; T &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="164" column="58" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1aaa32f9cc7ff60d45b4da0d6f019d266f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; rcppsw::algorithm::clustering::kmeans&lt; T &gt;::m_data_in</definition>
        <argsstring></argsstring>
        <name>m_data_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="163" column="58" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a3b9b377e680d4cc9161202d982f5a673" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kindref="compound">base_clustering_impl</ref>&lt; T, <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;base_clustering_impl&lt;T, policy::NC&gt; &gt; rcppsw::algorithm::clustering::kmeans&lt; T &gt;::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="168" column="2" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a23429e13d14193ec9b2ab6ca83c2e90c" prot="private" static="no" mutable="no">
        <type><ref refid="namespacercppsw_1_1algorithm_1_1clustering_1ae4bdc3c1b255447703e70a19e7c90aef" kindref="member">membership_type</ref>&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt;</type>
        <definition>membership_type&lt;policy::NC&gt; rcppsw::algorithm::clustering::kmeans&lt; T &gt;::m_membership</definition>
        <argsstring></argsstring>
        <name>m_membership</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="165" column="49" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab5273ae4bb25d3912784c7e6e00c2add" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rcppsw::algorithm::clustering::kmeans&lt; T &gt;::mc_k</definition>
        <argsstring></argsstring>
        <name>mc_k</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="161" column="61" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad2bb51a4699775df8550dcef6fa94007" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rcppsw::algorithm::clustering::kmeans&lt; T &gt;::mc_max_iter</definition>
        <argsstring></argsstring>
        <name>mc_max_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="160" column="61" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a7b193045912d2f3593b8b4648ff2c7c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcppsw::algorithm::clustering::kmeans&lt; T &gt;::kmeans</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data_in, std::unique_ptr&lt; base_clustering_impl&lt; T, policy::NC &gt; &gt; impl, size_t k, size_t max_iter)</argsstring>
        <name>kmeans</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data_in</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kindref="compound">base_clustering_impl</ref>&lt; T, <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt; &gt;</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of data to cluster. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>impl</parametername>
</parameternamelist>
<parameterdescription>
<para>The method and policy for clustering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The # of clusters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum # of iterations to perform. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="77" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="77" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a0592585fbe15c78016f5a0348d4bb405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacercppsw_1_1algorithm_1_1clustering_1ae4bdc3c1b255447703e70a19e7c90aef" kindref="member">membership_type</ref>&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1NC" kindref="compound">policy::NC</ref> &gt;</type>
        <definition>membership_type&lt;policy::NC&gt; rcppsw::algorithm::clustering::kmeans&lt; T &gt;::run</definition>
        <argsstring>(const dist_calc_ftype &amp;dist_func)</argsstring>
        <name>run</name>
        <param>
          <type>const <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad3b17da5d28333b05bdc287af92202b5" kindref="member">dist_calc_ftype</ref> &amp;</type>
          <declname>dist_func</declname>
        </param>
        <briefdescription>
<para>Perform clustering. First the clustering_impl::initialize() method is called. Then, the clustering algorithm is iterated until one of the following is true: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The maximum # of iterations has been reached.</para>
</listitem><listitem><para>cluster_impl::converged() returns <computeroutput>TRUE</computeroutput> (checked after each iteration).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>A vector where the index corresponds to the index of the data point in the input data, and the value corresponds to the cluster to which the data point belongs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="104" column="19" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="104" bodyend="140"/>
        <references refid="time__utils_8h_1a45b016f1122e07fce3e3881ecafd697b">time_monotonic_sec</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a779bc83bfaa46c1ab9b8883d47ce3107" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab60d2b177e97789ce7f6eee447f5cf2d" kindref="member">cluster_vector</ref></type>
        <definition>cluster_vector rcppsw::algorithm::clustering::kmeans&lt; T &gt;::clusters_init</definition>
        <argsstring>(void)</argsstring>
        <name>clusters_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Method for derived classes to use to initialize centroids in whatever way they choose, and perform first-touch allocation if they want to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="151" column="18" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="151" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper class for performing kmeans clustering. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data that is being clustered. It must support the following operations: +=, /=, = . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rcppsw::algorithm::clustering::kmeans&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rcppsw::er::client&lt; kmeans&lt; T &gt; &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>rcppsw::algorithm::clustering::kmeans&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rcppsw::er::client&lt; kmeans&lt; T &gt; &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
    </collaborationgraph>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" line="62" column="33" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/kmeans.hpp" bodystart="62" bodyend="170"/>
    <listofallmembers>
      <member refid="classrcppsw_1_1er_1_1client_1a6f82007aff2abc0424c3aea112f4d338" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>client</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac240653183e3bc50cdd7b94ab573dfdd" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>client</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1aa053026eecff5068c9e8519054f62e70" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>cluster_type</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab60d2b177e97789ce7f6eee447f5cf2d" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>cluster_vector</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a779bc83bfaa46c1ab9b8883d47ce3107" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>clusters_init</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad3b17da5d28333b05bdc287af92202b5" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>dist_calc_ftype</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8dbae2145314c17f94296af27e986ec7" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>env_verify</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a7b193045912d2f3593b8b4648ff2c7c9" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>kmeans</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fb3fcd567a3f7e65bbf8938ab5e8db7" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fca204898963d5d8ecb91e00cd84b88" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a6b752123f721497e565e028571a1a37b" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>logger</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab40243dbcdd2e695bace0708788d7ee2" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>logger_name</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ae3f3005bc9b32db29bd751bc8511d72a" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>logging_init</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1afc6731b7b29469e969c0e82775d4b1e6" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>m_clusters</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a06f80beaca9832924420944410aef67e" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>m_data</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1aaa32f9cc7ff60d45b4da0d6f019d266f" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>m_data_in</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a3b9b377e680d4cc9161202d982f5a673" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>m_impl</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a23429e13d14193ec9b2ab6ca83c2e90c" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>m_membership</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ab5273ae4bb25d3912784c7e6e00c2add" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>mc_k</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1ad2bb51a4699775df8550dcef6fa94007" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>mc_max_iter</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8e8addf09ab47c9ff19b70ebb72d614a" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>mdc_add</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab8d0b0946f73dc6ed3c0f6c6981f7a93" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>mdc_rm</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4b552cb8803ac3cc5c96a6a97deaaec0" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>ndc_do_pop</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a2b3dbedbca4f96b9e2e2ce91fb3bac3d" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>ndc_do_push</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac18e66461acd38f97e1cefe7611ca9fb" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>operator=</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans_1a0592585fbe15c78016f5a0348d4bb405" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>run</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a0e6a2aa2f2d0af9352f3ca3044e015d0" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::kmeans</scope><name>~client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
