<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository" kind="class" language="C++" prot="public">
    <compoundname>rcppsw::config::xml::xml_config_repository</compoundname>
    <basecompoundref refid="classrcppsw_1_1er_1_1client" prot="public" virt="non-virtual">rcppsw::er::client&lt; xml_config_repository &gt;</basecompoundref>
    <includes refid="xml__config__repository_8hpp" local="no">xml_config_repository.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aa1828c3f5401a3625ec672facd12a347" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::type_index, std::string &gt;</type>
        <definition>std::map&lt;std::type_index, std::string&gt; rcppsw::config::xml::xml_config_repository::m_config_types</definition>
        <argsstring></argsstring>
        <name>m_config_types</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="185" column="21" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a5cf30201fe41d737531721940ec79a8d" prot="private" static="no" mutable="no">
        <type><ref refid="classrcppsw_1_1patterns_1_1factory_1_1sharing__factory" kindref="compound">patterns::factory::sharing_factory</ref>&lt; xml_config_parser, std::string &gt;</type>
        <definition>patterns::factory::sharing_factory&lt;xml_config_parser, std::string&gt; rcppsw::config::xml::xml_config_repository::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="187" column="2" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a3c33ac5f8c28401b354f874ecdafc976" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, xml_config_parser * &gt;</type>
        <definition>std::map&lt;std::string, xml_config_parser*&gt; rcppsw::config::xml::xml_config_repository::m_parsers</definition>
        <argsstring></argsstring>
        <name>m_parsers</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="184" column="18" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ae496332aa6f1272d60a6880a6d1d8fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcppsw::config::xml::xml_config_repository::xml_config_repository</definition>
        <argsstring>(void)</argsstring>
        <name>xml_config_repository</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="63" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="63" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ae46a367387f8846cfd6f6082b154231d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* rcppsw::config::xml::xml_config_repository::config_get</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>config_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the parsed configuration associated with the parser of the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The parsed configuration (non-owning). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="107" column="12" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a8b00aea6b72c6b9b45e796dd5d437d11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* rcppsw::config::xml::xml_config_repository::config_get</definition>
        <argsstring>(void) const</argsstring>
        <name>config_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the parsed configuration associated with the parser of the specified type (note that the name that the parser was registered with is not needed in this formulation). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The parsed configuration (non-owning), or NULL if an invalid type of configuration was requested. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="91" column="12" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a80ccd873caec50798822f1079e31b0ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::config::xml::xml_config_repository::parse_all</definition>
        <argsstring>(const ticpp::Element &amp;node)</argsstring>
        <name>parse_all</name>
        <param>
          <type>const ticpp::Element &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Call the xml_config_parser::parse() function on all parsers in the repository, passing all parsers the same XML node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="70" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aec41270515c507e31abf20630bcb38c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* rcppsw::config::xml::xml_config_repository::parser_find</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>parser_find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a registered parser by name (non-owning). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the parser.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-owning pointer to the requested parser, or NULL if no such parser was registered. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="124" column="6" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aadd7bdaf955aa78c5188debd3219be5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rcppsw::config::xml::xml_config_repository::parser_register</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>parser_register</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Register a parser of a given type (must be derived from xml_config_parser) and associate it with the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The parser type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the configuration that the parser produces when parse() is called on it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="141" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ad2594410c45de0b34d51bdb8e2ee2f23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rcppsw::config::xml::xml_config_repository::parser_register</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>parser_register</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Register a parser of a given type (must be derived from xml_config_parser) and associate it with the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para>If you use this function, then you will have to refer to the parse results by type + name, rather than just by type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The parser type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="177" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aced58f078ef8c835d9eb9f90454be700" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rcppsw::config::xml::xml_config_repository::parser_unregister</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>parser_unregister</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Register a parser of a given type (must be derived from xml_config_parser) and associate it with the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The parser type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the configuration that the parser produces when parse() is called on it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="157" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a51a4b5bfd9106841588eb252f749f4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcppsw::config::xml::xml_config_repository::validate_all</definition>
        <argsstring>(void)</argsstring>
        <name>validate_all</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Call the xml_config_parser::validate() function on all parsers in the repository, and return whether or not <emphasis>ALL</emphasis> parsers report valid configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>TRUE</computeroutput> iff ALL parsers report valid configuration, and <computeroutput>FALSE</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="80" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A repository for multiple xml_config_parser objects and their parsed results; allows collective operations on multiple parsers. </para>
    </briefdescription>
    <detaileddescription>
<para>Utilizes factory pattern for parser creation. Does not create any parsers on its own (how could it know which ones to create?). All created parsers must derive from xml_config_parser, and have a constructor with the same signature as the constructor for that class available, or cryptic compile errors will result. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>rcppsw::er::client&lt; xml_config_repository &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
      <node id="1">
        <label>rcppsw::config::xml::xml_config_repository</label>
        <link refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>rcppsw::er::client&lt; xml_config_repository &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
      <node id="1">
        <label>rcppsw::config::xml::xml_config_repository</label>
        <link refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" line="61" column="47" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/config/xml/xml_config_repository.hpp" bodystart="61" bodyend="189"/>
    <listofallmembers>
      <member refid="classrcppsw_1_1er_1_1client_1a6f82007aff2abc0424c3aea112f4d338" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>client</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac240653183e3bc50cdd7b94ab573dfdd" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>client</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a8b00aea6b72c6b9b45e796dd5d437d11" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>config_get</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ae46a367387f8846cfd6f6082b154231d" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>config_get</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8dbae2145314c17f94296af27e986ec7" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>env_verify</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fb3fcd567a3f7e65bbf8938ab5e8db7" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fca204898963d5d8ecb91e00cd84b88" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a6b752123f721497e565e028571a1a37b" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>logger</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab40243dbcdd2e695bace0708788d7ee2" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>logger_name</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ae3f3005bc9b32db29bd751bc8511d72a" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>logging_init</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aa1828c3f5401a3625ec672facd12a347" prot="private" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>m_config_types</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a5cf30201fe41d737531721940ec79a8d" prot="private" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>m_factory</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a3c33ac5f8c28401b354f874ecdafc976" prot="private" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>m_parsers</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8e8addf09ab47c9ff19b70ebb72d614a" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>mdc_add</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab8d0b0946f73dc6ed3c0f6c6981f7a93" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>mdc_rm</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4b552cb8803ac3cc5c96a6a97deaaec0" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>ndc_do_pop</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a2b3dbedbca4f96b9e2e2ce91fb3bac3d" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>ndc_do_push</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac18e66461acd38f97e1cefe7611ca9fb" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>operator=</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a80ccd873caec50798822f1079e31b0ef" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>parse_all</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aec41270515c507e31abf20630bcb38c2" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>parser_find</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aadd7bdaf955aa78c5188debd3219be5e" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>parser_register</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ad2594410c45de0b34d51bdb8e2ee2f23" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>parser_register</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1aced58f078ef8c835d9eb9f90454be700" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>parser_unregister</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1a51a4b5bfd9106841588eb252f749f4be" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>validate_all</name></member>
      <member refid="classrcppsw_1_1config_1_1xml_1_1xml__config__repository_1ae496332aa6f1272d60a6880a6d1d8fe2" prot="public" virt="non-virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>xml_config_repository</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a0e6a2aa2f2d0af9352f3ca3044e015d0" prot="public" virt="virtual"><scope>rcppsw::config::xml::xml_config_repository</scope><name>~client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
