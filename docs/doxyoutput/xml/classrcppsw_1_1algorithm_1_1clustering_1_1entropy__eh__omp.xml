<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp" kind="class" language="C++" prot="public" final="yes">
    <compoundname>rcppsw::algorithm::clustering::entropy_eh_omp</compoundname>
    <basecompoundref refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl" prot="public" virt="non-virtual">rcppsw::algorithm::clustering::eh_clustering_impl&lt; T &gt;</basecompoundref>
    <includes refid="entropy__eh__omp_8hpp" local="no">entropy_eh_omp.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1af8aeb0ef4f39ba6000eef55d94d51f82" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::mc_n_threads</definition>
        <argsstring></argsstring>
        <name>mc_n_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="87" column="16" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a7eae5d283ae906cd34415b42331268c5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::entropy_eh_omp</definition>
        <argsstring>(size_t n_threads)</argsstring>
        <name>entropy_eh_omp</name>
        <param>
          <type>size_t</type>
          <declname>n_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="58" column="12" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1afa9fb2d46570aa111912df364d147a62" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::converged</definition>
        <argsstring>(const cluster_vector &amp;) const override</argsstring>
        <name>converged</name>
        <reimplements refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a66ad621088e5c8007b62d527ed5fc001">converged</reimplements>
        <param>
          <type>const <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
<para>Determine if the clusters have converged and the algorithm should be terminated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>TRUE</computeroutput> if the algorithm has converged, <computeroutput>FALSE</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="80" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a47835ebda95854ccf5e9b845da6bb596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::initialize</definition>
        <argsstring>(std::vector&lt; T &gt; *const data, membership_type&lt; policy::EH &gt; *const membership) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a5931c398b226c9b0fd1719157a0f3774">initialize</reimplements>
        <param>
          <type>std::vector&lt; T &gt; *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacercppsw_1_1algorithm_1_1clustering_1ae4bdc3c1b255447703e70a19e7c90aef" kindref="member">membership_type</ref>&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1policy_1_1EH" kindref="compound">policy::EH</ref> &gt; *const</type>
          <declname>membership</declname>
        </param>
        <briefdescription>
<para>Perform algorithm-specific clustering initialization (memory localization, etc.). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="60" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1aeda3a6c79bcd67a20aad31d93c6558c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::iterate</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const dist_calc_ftype &amp;dist_func, cluster_vector *const clusters) override</argsstring>
        <name>iterate</name>
        <reimplements refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a57b1d1b0a37630e02f8c0bbf49679c42">iterate</reimplements>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a6d0cb28b21790eb053a2fa7a423e46da" kindref="member">dist_calc_ftype</ref> &amp;</type>
          <declname>dist_func</declname>
        </param>
        <param>
          <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> *const</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="67" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a96ec570d8a3d3cfccc9d542324e4f2d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::n_threads</definition>
        <argsstring>(void) const</argsstring>
        <name>n_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="83" column="10" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1ab39a1575c1005a9fd44dd97c14aed9d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;::post_iter_update</definition>
        <argsstring>(cluster_vector *const) override</argsstring>
        <name>post_iter_update</name>
        <reimplements refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a0331abbc18e66c066f7c4bc256d95144">post_iter_update</reimplements>
        <param>
          <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> * const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="81" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parallel clustering using the Event Horizon (EH) membership policy with OpenMP. Suitable for information entropy calculations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>rcppsw::algorithm::clustering::eh_clustering_impl&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rcppsw::algorithm::clustering::base_clustering_impl&lt; T, policy::EH &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl"/>
      </node>
      <node id="1">
        <label>rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>rcppsw::algorithm::clustering::eh_clustering_impl&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rcppsw::algorithm::clustering::base_clustering_impl&lt; T, policy::EH &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl"/>
      </node>
      <node id="1">
        <label>rcppsw::algorithm::clustering::entropy_eh_omp&lt; T &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" line="52" column="48" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/entropy_eh_omp.hpp" bodystart="52" bodyend="89"/>
    <listofallmembers>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af36eb09f7dedf9887de013daa1b77c6f" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>cluster_type</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>cluster_vector</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1afa9fb2d46570aa111912df364d147a62" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>converged</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a6d0cb28b21790eb053a2fa7a423e46da" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>dist_calc_ftype</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a7eae5d283ae906cd34415b42331268c5" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>entropy_eh_omp</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl_1aa7062eb40a44b1d7bd2000fb4c229c3d" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>horizon</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl_1a6575ba584276f776a67640e03f8b0627" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>horizon</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a47835ebda95854ccf5e9b845da6bb596" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>initialize</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1aeda3a6c79bcd67a20aad31d93c6558c8" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>iterate</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1af8aeb0ef4f39ba6000eef55d94d51f82" prot="private" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>mc_n_threads</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a96ec570d8a3d3cfccc9d542324e4f2d2" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>n_threads</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1ab39a1575c1005a9fd44dd97c14aed9d6" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>post_iter_update</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a54140d4d5406e8a29ff5915561569a8a" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>~base_clustering_impl</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1eh__clustering__impl_1a3c179e0984d0a66bb81150cdb8d35ad6" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::entropy_eh_omp</scope><name>~eh_clustering_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
