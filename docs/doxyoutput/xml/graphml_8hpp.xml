<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="graphml_8hpp" kind="file" language="C++">
    <compoundname>graphml.hpp</compoundname>
    <includes local="no">boost/graph/graphml.hpp</includes>
    <includes local="no">boost/property_map/dynamic_property_map.hpp</includes>
    <includes local="no">filesystem</includes>
    <includes local="no">fstream</includes>
    <includes refid="graph_8hpp" local="yes">rcppsw/ds/graph/graph.hpp</includes>
    <includes refid="decorator_8hpp" local="yes">rcppsw/patterns/decorator/decorator.hpp</includes>
    <incdepgraph>
      <node id="42">
        <label>rcppsw/math/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>limits</label>
      </node>
      <node id="44">
        <label>rcppsw/math/sphere_vector.hpp</label>
        <link refid="sphere__vector_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>filesystem</label>
      </node>
      <node id="33">
        <label>boost/stacktrace.hpp</label>
      </node>
      <node id="26">
        <label>log4cxx/fileappender.h</label>
      </node>
      <node id="16">
        <label>rcppsw/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>rcsw/common/common.h</label>
        <link refid="common_8h.html" external="/home/jharwell/git/rcppsw/build/docs/rcsw/RCSW.tag"/>
      </node>
      <node id="45">
        <label>rcppsw/math/vector2.hpp</label>
        <link refid="vector2_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rcppsw/common/common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>rcppsw/utils/string_utils.hpp</label>
        <link refid="string__utils_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp</label>
        <link refid="graphml_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>log4cxx/xml/domconfigurator.h</label>
      </node>
      <node id="17">
        <label>cmath</label>
      </node>
      <node id="35">
        <label>cassert</label>
      </node>
      <node id="48">
        <label>rcppsw/patterns/decorator/decorator.hpp</label>
        <link refid="decorator_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>rcppsw/er/stacktrace.hpp</label>
        <link refid="stacktrace_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="20">
        <label>rcppsw/math/range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>boost/range/adaptor/transformed.hpp</label>
      </node>
      <node id="29">
        <label>log4cxx/patternlayout.h</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="10">
        <label>rcppsw/rcppsw.hpp</label>
        <link refid="rcppsw_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>log4cxx/ndc.h</label>
      </node>
      <node id="3">
        <label>boost/property_map/dynamic_property_map.hpp</label>
      </node>
      <node id="25">
        <label>log4cxx/consoleappender.h</label>
      </node>
      <node id="23">
        <label>rcppsw/er/er.hpp</label>
        <link refid="er_8hpp"/>
      </node>
      <node id="15">
        <label>rcppsw/mpl/mpl.hpp</label>
        <link refid="mpl_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>rcppsw/ds/graph/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>vector</label>
      </node>
      <node id="41">
        <label>rcppsw/er/stringizable.hpp</label>
        <link refid="stringizable_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>utility</label>
      </node>
      <node id="34">
        <label>array</label>
      </node>
      <node id="39">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>rcppsw/math/radians.hpp</label>
        <link refid="radians_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iosfwd</label>
      </node>
      <node id="36">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>rcppsw/common/macros.hpp</label>
        <link refid="common_2macros_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>rcppsw/types/discretize_ratio.hpp</label>
        <link refid="discretize__ratio_8hpp"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/optional.hpp</label>
      </node>
      <node id="22">
        <label>rcppsw/er/client.hpp</label>
        <link refid="client_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="2">
        <label>boost/graph/graphml.hpp</label>
      </node>
      <node id="31">
        <label>rcppsw/er/macros.hpp</label>
        <link refid="er_2macros_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="47">
        <label>rcppsw/types/named_type.hpp</label>
        <link refid="named__type_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structrcppsw_1_1ds_1_1graph_1_1detail_1_1is__decorator" prot="public">rcppsw::ds::graph::detail::is_decorator</innerclass>
    <innerclass refid="structrcppsw_1_1ds_1_1graph_1_1detail_1_1is__decorator_3_01T_00_01std_1_1void__t_3_01decltype_0797869b44197aeec6ced20fc5796ab80b" prot="public">rcppsw::ds::graph::detail::is_decorator&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().decoratee())&gt; &gt;</innerclass>
    <innernamespace refid="namespacercppsw">rcppsw</innernamespace>
    <innernamespace refid="namespacercppsw_1_1ds">rcppsw::ds</innernamespace>
    <innernamespace refid="namespacercppsw_1_1ds_1_1graph">rcppsw::ds::graph</innernamespace>
    <innernamespace refid="namespacercppsw_1_1ds_1_1graph_1_1detail">rcppsw::ds::graph::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphml_8hpp_1ada827a7b395b9d2985d319a5f73b68f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TMapType</type>
          </param>
          <param>
            <type>typename TBGLGraphType</type>
          </param>
        </templateparamlist>
        <type>TMapType</type>
        <definition>static TMapType property_map_gen</definition>
        <argsstring>(TBGLGraphType &amp;g, std::function&lt; void(TMapType &amp;map, TBGLGraphType &amp;g)&gt; cb)</argsstring>
        <name>property_map_gen</name>
        <param>
          <type>TBGLGraphType &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; void(TMapType &amp;map, TBGLGraphType &amp;g)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Generate a property map of arbitrary type over a BGL graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" line="79" column="24" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="graphml_8hpp_1abc0de501117e48cdaf1eb0a49de8e3e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TMapType</type>
          </param>
          <param>
            <type>typename TGraphType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(detail::is_decorator&lt; TGraphType &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>TMapType</type>
        <definition>static TMapType property_map_gen</definition>
        <argsstring>(TGraphType &amp;g, std::function&lt; void(TMapType &amp;map, typename TGraphType::decoratee_type &amp;g)&gt; cb)</argsstring>
        <name>property_map_gen</name>
        <param>
          <type>TGraphType &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::function&lt; void(TMapType &amp;map, typename TGraphType::decoratee_type &amp;g)&gt;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Generate a property map of arbitrary type over a decorated BGL graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" line="67" column="24" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="graphml_8hpp_1ae0a49e2853fa45d8b055e8543403419f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TBGLGraphType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(!detail::is_decorator&lt; TBGLGraphType &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void read_graphml</definition>
        <argsstring>(const fs::path &amp;path, TBGLGraphType &amp;g, boost::dynamic_properties &amp;dp)</argsstring>
        <name>read_graphml</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>TBGLGraphType &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>boost::dynamic_properties &amp;</type>
          <declname>dp</declname>
        </param>
        <briefdescription>
<para>Read the the contents of a BGL graph from a GraphML file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" line="103" column="20" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" bodystart="103" bodyend="108"/>
        <references refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" compoundref="graphml_8hpp" startline="92" endline="96">read_graphml</references>
      </memberdef>
      <memberdef kind="function" id="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TDecoratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(detail::is_decorator&lt; TDecoratorType &gt;::value), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void read_graphml</definition>
        <argsstring>(const fs::path &amp;path, TDecoratorType &amp;g, boost::dynamic_properties &amp;dp)</argsstring>
        <name>read_graphml</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>TDecoratorType &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>boost::dynamic_properties &amp;</type>
          <declname>dp</declname>
        </param>
        <briefdescription>
<para>Read the the contents of a decorated BGL graph from a GraphML file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" line="92" column="20" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp" bodystart="92" bodyend="96"/>
        <referencedby refid="graphml_8hpp_1ae0a49e2853fa45d8b055e8543403419f" compoundref="graphml_8hpp" startline="103" endline="108">read_graphml</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2021 John Harwell, All rights reserved.</para>
</simplesect>
This file is part of RCPPSW.</para>
<para>RCPPSW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para>
<para>RCPPSW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para>
<para>You should have received a copy of the GNU General Public License along with RCPPSW. If not, see &lt;<ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_RCPPSW_DS_GRAPH_GRAPHML_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_RCPPSW_DS_GRAPH_GRAPHML_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/graphml.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/property_map/dynamic_property_map.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graph_8hpp" kindref="compound">rcppsw/ds/graph/graph.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="decorator_8hpp" kindref="compound">rcppsw/patterns/decorator/decorator.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Namespaces/Decls</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="common_2macros_8hpp_1a553c4f9d95d9ac867c32675925e86368" kindref="member">NS_START</ref>(<ref refid="namespacercppsw" kindref="compound">rcppsw</ref>,<sp/>ds,<sp/>graph,<sp/>detail);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>Templates</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="47"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_decorator<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_decorator&lt;</highlight></codeline>
<codeline lineno="52" refid="structrcppsw_1_1ds_1_1graph_1_1detail_1_1is__decorator" refkind="compound"><highlight class="normal"><sp/><sp/>T,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().decoratee())&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="55" refid="structrcppsw_1_1ds_1_1graph_1_1detail_1_1is__decorator_3_01T_00_01std_1_1void__t_3_01decltype_0797869b44197aeec6ced20fc5796ab80b" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="common_2macros_8hpp_1af6c55b58384045452cc8ce88f54e3265" kindref="member">NS_END</ref>(detail);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>std::filesystem;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TMapType,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TGraphType,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(<ref refid="structrcppsw_1_1ds_1_1graph_1_1detail_1_1is__decorator" kindref="compound">detail::is_decorator&lt;TGraphType&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="67" refid="graphml_8hpp_1abc0de501117e48cdaf1eb0a49de8e3e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TMapType<sp/><ref refid="graphml_8hpp_1abc0de501117e48cdaf1eb0a49de8e3e0" kindref="member">property_map_gen</ref>(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>TGraphType&amp;<sp/>g,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(TMapType&amp;<sp/>map,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TGraphType::decoratee_type&amp;<sp/>g)&gt;<sp/>cb)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="graphml_8hpp_1abc0de501117e48cdaf1eb0a49de8e3e0" kindref="member">property_map_gen</ref>(g.decoratee(),<sp/>cb);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TMapType,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TBGLGraphType&gt;</highlight></codeline>
<codeline lineno="79" refid="graphml_8hpp_1ada827a7b395b9d2985d319a5f73b68f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TMapType<sp/><ref refid="graphml_8hpp_1abc0de501117e48cdaf1eb0a49de8e3e0" kindref="member">property_map_gen</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>TBGLGraphType&amp;<sp/>g,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(TMapType&amp;<sp/>map,<sp/>TBGLGraphType&amp;<sp/>g)&gt;<sp/>cb)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>TMapType<sp/>map;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>cb(map,<sp/>g);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TDecoratorType,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(detail::is_decorator&lt;TDecoratorType&gt;::value)&gt;</highlight></codeline>
<codeline lineno="92" refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" kindref="member">read_graphml</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fs::path&amp;<sp/>path,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TDecoratorType&amp;<sp/>g,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::dynamic_properties&amp;<sp/>dp)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" kindref="member">read_graphml</ref>(path,<sp/>g.decoratee(),<sp/>dp);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TBGLGraphType,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!detail::is_decorator&lt;TBGLGraphType&gt;::value)&gt;</highlight></codeline>
<codeline lineno="103" refid="graphml_8hpp_1ae0a49e2853fa45d8b055e8543403419f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" kindref="member">read_graphml</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fs::path&amp;<sp/>path,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TBGLGraphType&amp;<sp/>g,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::dynamic_properties&amp;<sp/>dp)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>std::ifstream(path,<sp/>std::ios_base::in);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="graphml_8hpp_1a7a28aced8d1ccda9abf36349d4acc7cf" kindref="member">boost::read_graphml</ref>(file,<sp/>g,<sp/>dp);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="common_2macros_8hpp_1af6c55b58384045452cc8ce88f54e3265" kindref="member">NS_END</ref>(graph,<sp/>ds,<sp/><ref refid="namespacercppsw" kindref="compound">rcppsw</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_RCPPSW_DS_GRAPH_GRAPHML_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp"/>
  </compounddef>
</doxygen>
