<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl" kind="interface" language="C++" prot="public" abstract="yes">
    <compoundname>rcppsw::algorithm::clustering::base_clustering_impl</compoundname>
    <includes refid="base__clustering__impl_8hpp" local="no">base_clustering_impl.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename Policy</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af36eb09f7dedf9887de013daa1b77c6f" prot="public" static="no">
        <type>typename <ref refid="structrcppsw_1_1algorithm_1_1clustering_1_1cluster_1_1mapping" kindref="compound">cluster::mapping</ref>&lt; T, Policy &gt;::type</type>
        <definition>using rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::cluster_type =  typename cluster::mapping&lt;T, Policy&gt;::type</definition>
        <argsstring></argsstring>
        <name>cluster_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="57" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af36eb09f7dedf9887de013daa1b77c6f" kindref="member">cluster_type</ref> &gt;</type>
        <definition>using rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::cluster_vector =  std::vector&lt;cluster_type&gt;</definition>
        <argsstring></argsstring>
        <name>cluster_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="58" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a6d0cb28b21790eb053a2fa7a423e46da" prot="public" static="no">
        <type>std::function&lt; double(const T &amp;, const T &amp;)&gt;</type>
        <definition>using rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::dist_calc_ftype =  std::function&lt;double(const T&amp;, const T&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>dist_calc_ftype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="59" column="3" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a54140d4d5406e8a29ff5915561569a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::~base_clustering_impl</definition>
        <argsstring>(void)=default</argsstring>
        <name>~base_clustering_impl</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="61" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a66ad621088e5c8007b62d527ed5fc001" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::converged</definition>
        <argsstring>(const cluster_vector &amp;clusters) const =0</argsstring>
        <name>converged</name>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1afa9fb2d46570aa111912df364d147a62">converged</reimplementedby>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans__omp_1afd335812f1785c0d89a39643cbe0a4b7">converged</reimplementedby>
        <param>
          <type>const <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
<para>Determine if the clusters have converged and the algorithm should be terminated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>TRUE</computeroutput> if the algorithm has converged, <computeroutput>FALSE</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="69" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a5931c398b226c9b0fd1719157a0f3774" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::initialize</definition>
        <argsstring>(std::vector&lt; T &gt; *data, membership_type&lt; Policy &gt; *membership)=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1a47835ebda95854ccf5e9b845da6bb596">initialize</reimplementedby>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans__omp_1ad75d0c14be090ed69b8a5e5e7b4b3c4a">initialize</reimplementedby>
        <param>
          <type>std::vector&lt; T &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacercppsw_1_1algorithm_1_1clustering_1ae4bdc3c1b255447703e70a19e7c90aef" kindref="member">membership_type</ref>&lt; Policy &gt; *</type>
          <declname>membership</declname>
        </param>
        <briefdescription>
<para>Perform algorithm-specific clustering initialization (memory localization, etc.). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="87" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a57b1d1b0a37630e02f8c0bbf49679c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::iterate</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const dist_calc_ftype &amp;dist_func, cluster_vector *clusters)=0</argsstring>
        <name>iterate</name>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1aeda3a6c79bcd67a20aad31d93c6558c8">iterate</reimplementedby>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans__omp_1aef49a2ecbb8133b2e92dfd55a2d1a622">iterate</reimplementedby>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a6d0cb28b21790eb053a2fa7a423e46da" kindref="member">dist_calc_ftype</ref> &amp;</type>
          <declname>dist_func</declname>
        </param>
        <param>
          <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> *</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="74" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a0331abbc18e66c066f7c4bc256d95144" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;::post_iter_update</definition>
        <argsstring>(cluster_vector *clusters)=0</argsstring>
        <name>post_iter_update</name>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1kmeans__omp_1a88460fcb2a69cec9a17d315d4f877ed2">post_iter_update</reimplementedby>
        <reimplementedby refid="classrcppsw_1_1algorithm_1_1clustering_1_1entropy__eh__omp_1ab39a1575c1005a9fd44dd97c14aed9d6">post_iter_update</reimplementedby>
        <param>
          <type><ref refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" kindref="member">cluster_vector</ref> *</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="81" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Templated class interface to guide the implementation of various clustering algorithms by giving them a necessary set of functions to implement so that they can be then run in an implementation agnostic way. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>rcppsw::algorithm::clustering::base_clustering_impl&lt; T, Policy &gt;</label>
        <link refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl"/>
      </node>
    </collaborationgraph>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" line="55" column="27" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/algorithm/clustering/base_clustering_impl.hpp" bodystart="55" bodyend="89"/>
    <listofallmembers>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af36eb09f7dedf9887de013daa1b77c6f" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>cluster_type</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1af7c16dc09eba724dd34e5afb5070b5b5" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>cluster_vector</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a66ad621088e5c8007b62d527ed5fc001" prot="public" virt="pure-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>converged</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a6d0cb28b21790eb053a2fa7a423e46da" prot="public" virt="non-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>dist_calc_ftype</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a5931c398b226c9b0fd1719157a0f3774" prot="public" virt="pure-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>initialize</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a57b1d1b0a37630e02f8c0bbf49679c42" prot="public" virt="pure-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>iterate</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a0331abbc18e66c066f7c4bc256d95144" prot="public" virt="pure-virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>post_iter_update</name></member>
      <member refid="classrcppsw_1_1algorithm_1_1clustering_1_1base__clustering__impl_1a54140d4d5406e8a29ff5915561569a8a" prot="public" virt="virtual"><scope>rcppsw::algorithm::clustering::base_clustering_impl</scope><name>~base_clustering_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
