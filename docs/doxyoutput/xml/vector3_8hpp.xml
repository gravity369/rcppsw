<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vector3_8hpp" kind="file" language="C++">
    <compoundname>vector3.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes refid="radians_8hpp" local="yes">rcppsw/math/radians.hpp</includes>
    <includes refid="sphere__vector_8hpp" local="yes">rcppsw/math/sphere_vector.hpp</includes>
    <includes refid="vector2_8hpp" local="yes">rcppsw/math/vector2.hpp</includes>
    <includes refid="rcppsw_8hpp" local="yes">rcppsw/rcppsw.hpp</includes>
    <includes refid="discretize__ratio_8hpp" local="yes">rcppsw/types/discretize_ratio.hpp</includes>
    <includes refid="stringizable_8hpp" local="yes">rcppsw/er/stringizable.hpp</includes>
    <includedby refid="base__grid3D_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid3D.hpp</includedby>
    <includedby refid="base__grid__overlay_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid_overlay.hpp</includedby>
    <includedby refid="graph_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graph.hpp</includedby>
    <includedby refid="hgrid3D_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D.hpp</includedby>
    <includedby refid="hgrid3D__vertex__property_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_vertex_property.hpp</includedby>
    <includedby refid="hgrid3D__view__builder_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_builder.hpp</includedby>
    <includedby refid="hgrid3D__view__filter_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter.hpp</includedby>
    <includedby refid="hgrid3D__view__filter__data_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter_data.hpp</includedby>
    <includedby refid="rtree_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/rtree.hpp</includedby>
    <includedby refid="bounding__box_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/math/bounding_box.hpp</includedby>
    <includedby refid="spatial_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/math/spatial.hpp</includedby>
    <includedby refid="base__manager_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/metrics/base_manager.hpp</includedby>
    <incdepgraph>
      <node id="33">
        <label>rcppsw/math/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="35">
        <label>rcppsw/math/sphere_vector.hpp</label>
        <link refid="sphere__vector_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>boost/stacktrace.hpp</label>
      </node>
      <node id="12">
        <label>log4cxx/fileappender.h</label>
      </node>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>rcsw/common/common.h</label>
        <link refid="common_8h.html" external="/home/jharwell/git/rcppsw/build/docs/rcsw/RCSW.tag"/>
      </node>
      <node id="36">
        <label>rcppsw/math/vector2.hpp</label>
        <link refid="vector2_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>rcppsw/common/common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>rcppsw/utils/string_utils.hpp</label>
        <link refid="string__utils_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>log4cxx/xml/domconfigurator.h</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="26">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>rcppsw/er/stacktrace.hpp</label>
        <link refid="stacktrace_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="6">
        <label>rcppsw/math/range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>log4cxx/patternlayout.h</label>
      </node>
      <node id="17">
        <label>rcppsw/rcppsw.hpp</label>
        <link refid="rcppsw_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>log4cxx/ndc.h</label>
      </node>
      <node id="11">
        <label>log4cxx/consoleappender.h</label>
      </node>
      <node id="9">
        <label>rcppsw/er/er.hpp</label>
        <link refid="er_8hpp"/>
      </node>
      <node id="21">
        <label>rcppsw/mpl/mpl.hpp</label>
        <link refid="mpl_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>vector</label>
      </node>
      <node id="32">
        <label>rcppsw/er/stringizable.hpp</label>
        <link refid="stringizable_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="25">
        <label>array</label>
      </node>
      <node id="30">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>rcppsw/math/radians.hpp</label>
        <link refid="radians_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iosfwd</label>
      </node>
      <node id="27">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>rcppsw/common/macros.hpp</label>
        <link refid="common_2macros_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>rcppsw/types/discretize_ratio.hpp</label>
        <link refid="discretize__ratio_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rcppsw/er/client.hpp</label>
        <link refid="client_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>type_traits</label>
      </node>
      <node id="22">
        <label>rcppsw/er/macros.hpp</label>
        <link refid="er_2macros_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="38">
        <label>rcppsw/types/named_type.hpp</label>
        <link refid="named__type_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="29">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/register_with_sink.hpp</label>
        <link refid="register__with__sink_8hpp"/>
      </node>
      <node id="23">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/spatial.hpp</label>
        <link refid="spatial_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_data.hpp</label>
        <link refid="grid3D__metrics__data_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter_data.hpp</label>
        <link refid="hgrid3D__view__filter__data_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp</label>
        <link refid="graphml_8hpp"/>
      </node>
      <node id="7">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid3D_overlay.hpp</label>
        <link refid="grid3D__overlay_8hpp"/>
      </node>
      <node id="9">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid2D_overlay.hpp</label>
        <link refid="grid2D__overlay_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid3D.hpp</label>
        <link refid="base__grid3D_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/file_sink_registerer.hpp</label>
        <link refid="file__sink__registerer_8hpp"/>
      </node>
      <node id="14">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D.hpp</label>
        <link refid="hgrid3D_8hpp"/>
      </node>
      <node id="24">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/base_manager.hpp</label>
        <link refid="base__manager_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view.hpp</label>
        <link refid="hgrid3D__view_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid_overlay.hpp</label>
        <link refid="base__grid__overlay_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_output_manager.hpp</label>
        <link refid="network__output__manager_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_collector.hpp</label>
        <link refid="grid3D__metrics__collector_8hpp"/>
      </node>
      <node id="28">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_sink_registerer.hpp</label>
        <link refid="network__sink__registerer_8hpp"/>
      </node>
      <node id="12">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/directed_graph.hpp</label>
        <link refid="directed__graph_8hpp"/>
      </node>
      <node id="21">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/rtree.hpp</label>
        <link refid="rtree_8hpp"/>
      </node>
      <node id="18">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_vertex_property.hpp</label>
        <link refid="hgrid3D__vertex__property_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/stacked_grid2D.hpp</label>
        <link refid="stacked__grid2D_8hpp"/>
      </node>
      <node id="3">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid3D.hpp</label>
        <link refid="grid3D_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_spec.hpp</label>
        <link refid="hgrid3D__spec_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_csv_sink.hpp</label>
        <link refid="grid3D__metrics__csv__sink_8hpp"/>
      </node>
      <node id="16">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_builder.hpp</label>
        <link refid="hgrid3D__view__builder_8hpp"/>
      </node>
      <node id="25">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/fs_output_manager.hpp</label>
        <link refid="fs__output__manager_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter.hpp</label>
        <link refid="hgrid3D__view__filter_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classrcppsw_1_1math_1_1vector3" prot="public">rcppsw::math::vector3</innerclass>
    <innerclass refid="structrcppsw_1_1math_1_1vector3_1_1componentwise__compare" prot="public">rcppsw::math::vector3::componentwise_compare</innerclass>
    <innerclass refid="structrcppsw_1_1math_1_1vector3_1_1key__compare" prot="public">rcppsw::math::vector3::key_compare</innerclass>
    <innernamespace refid="namespacercppsw">rcppsw</innernamespace>
    <innernamespace refid="namespacercppsw_1_1math">rcppsw::math</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="vector3_8hpp_1ab614500b7244cb771163840bf272433a" prot="public" static="no">
        <name>RCPPSW_MATH_VEC3_CONV2DISC</name>
        <param><defname>dest_prefix</defname></param>
        <param><defname>dest_type</defname></param>
        <initializer>  static inline vector3##dest_prefix dvec2##dest_prefix##vec(               \
      const vector3d&amp; other, double scale) {                                \
     return vector3##dest_prefix(static_cast&lt;dest_type&gt;(other.x() / scale),  \
                                static_cast&lt;dest_type&gt;(other.y() / scale),  \
                                static_cast&lt;dest_type&gt;(other.z() / scale)); \
  }</initializer>
        <briefdescription>
<para>Convert vector3d -&gt; vector3{i,z}, applying a divisive scaling factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" line="470" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vector3_8hpp_1a63b83599fd7a2a3ceb1d533de12e08bc" prot="public" static="no">
        <name>RCPPSW_MATH_VEC3_DIRECT_CONV2FLT</name>
        <param><defname>prefix</defname></param>
        <initializer>  static inline vector3d prefix##vec2dvec(const vector3##prefix&amp; other) { \
    return vector3d(other.x(), other.y(), other.z());                     \
  }</initializer>
        <briefdescription>
<para>Convert vector3{i,z} -&gt; vector3d directly, without applying any scaling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" line="451" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vector3_8hpp_1a86aae9da4652f9e2ccc53cca4254e6c2" prot="public" static="no">
        <name>RCPPSW_MATH_VEC3_SCALED_CONV2FLT</name>
        <param><defname>prefix</defname></param>
        <initializer>  static inline vector3d prefix##vec2dvec(const vector3##prefix&amp; other,       \
                                          double scale) {                     \
    return vector3d(other.x() * scale, other.y() * scale, other.z() * scale); \
  }</initializer>
        <briefdescription>
<para>Convert vector3{i,z} -&gt; vector3d, applying a multiplicative scaling factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" line="460" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp" bodystart="464" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2018 John Harwell, All rights reserved.</para>
</simplesect>
This file is part of RCPPSW.</para>
<para>RCPPSW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para>
<para>RCPPSW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para>
<para>You should have received a copy of the GNU General Public License along with RCPPSW. If not, see &lt;<ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_RCPPSW_MATH_VECTOR3_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_RCPPSW_MATH_VECTOR3_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="radians_8hpp" kindref="compound">rcppsw/math/radians.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sphere__vector_8hpp" kindref="compound">rcppsw/math/sphere_vector.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector2_8hpp" kindref="compound">rcppsw/math/vector2.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rcppsw_8hpp" kindref="compound">rcppsw/rcppsw.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="discretize__ratio_8hpp" kindref="compound">rcppsw/types/discretize_ratio.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringizable_8hpp" kindref="compound">rcppsw/er/stringizable.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Namespaces/Decls</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="common_2macros_8hpp_1a553c4f9d95d9ac867c32675925e86368" kindref="member">NS_START</ref>(<ref refid="namespacercppsw" kindref="compound">rcppsw</ref>,<sp/>math);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Class<sp/>Definitions</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="56"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">vector3<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>er::stringizable<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">key_compare<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68" refid="structrcppsw_1_1math_1_1vector3_1_1key__compare" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Order<sp/>based<sp/>on<sp/>X<sp/>unless<sp/>X&apos;s<sp/>are<sp/>equal,<sp/>if<sp/>so<sp/>order<sp/>on<sp/>Y,<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.x()<sp/>!=<sp/>rhs.x())<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;<sp/>rhs.x();</highlight></codeline>
<codeline lineno="71" refid="structrcppsw_1_1math_1_1vector3_1_1key__compare_1a7f01eb24b7cd100dc7cd98eb3cc6d4e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.y()<sp/>!=<sp/>rhs.y())<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.y()<sp/>&lt;<sp/>rhs.y();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.z()<sp/>&lt;<sp/>rhs.z();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(std::is_floating_point&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_x<sp/>=<sp/>std::fabs(lhs.x()<sp/>-<sp/>rhs.x())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_y<sp/>=<sp/>std::fabs(lhs.y()<sp/>-<sp/>rhs.y())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structrcppsw_1_1math_1_1vector3_1_1key__compare_1a7f01eb24b7cd100dc7cd98eb3cc6d4e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!equal_x)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;<sp/>rhs.x();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!equal_y)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.y()<sp/>&lt;<sp/>rhs.y();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.z()<sp/>&lt;<sp/>rhs.z();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">componentwise_compare<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&lt;U&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;=<sp/>rhs.x()<sp/>&amp;&amp;<sp/>lhs.y()<sp/>&lt;=<sp/>rhs.y()<sp/>&amp;&amp;<sp/>lhs.z()<sp/>&lt;=<sp/>rhs.z();</highlight></codeline>
<codeline lineno="100" refid="structrcppsw_1_1math_1_1vector3_1_1componentwise__compare" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="102" refid="structrcppsw_1_1math_1_1vector3_1_1componentwise__compare_1adfb638d58b92fce26cb61758689d5fcf" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kDIMENSIONALITY<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref><sp/>X;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref><sp/>Y;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref><sp/>Z;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>z)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_x(x),<sp/>m_y(y),<sp/>m_z(z)<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref>&amp;<sp/>v)<sp/>:<sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>{v,<sp/>T{0}}<sp/>{}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>vector3&lt;T&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>z)<sp/>:<sp/>vector3(v.x(),<sp/>v.y(),<sp/>z)<sp/>{}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>x(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x;<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>y(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_y;<sp/>}</highlight></codeline>
<codeline lineno="148" refid="classrcppsw_1_1math_1_1vector3_1a6b571ba519a42a0a2a01371e0e0d13b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>z(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_z;<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classrcppsw_1_1math_1_1vector3_1af99af271d2aed6d806dccf2b9966ddfd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1af99af271d2aed6d806dccf2b9966ddfd" kindref="member">x</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x;<sp/>}</highlight></codeline>
<codeline lineno="151" refid="classrcppsw_1_1math_1_1vector3_1ab28e8dab3f10afa3a18eb125cfe7e56c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1ab28e8dab3f10afa3a18eb125cfe7e56c" kindref="member">y</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_y;<sp/>}</highlight></codeline>
<codeline lineno="152" refid="classrcppsw_1_1math_1_1vector3_1ad9ca2096fd3b063623246722dd0cf68b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1ad9ca2096fd3b063623246722dd0cf68b" kindref="member">z</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_z;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classrcppsw_1_1math_1_1vector3_1aee373928453e09ce4e1a1631fe25e2f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3_1aee373928453e09ce4e1a1631fe25e2f9" kindref="member">x</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/>m_x<sp/>=<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1aee373928453e09ce4e1a1631fe25e2f9" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="155" refid="classrcppsw_1_1math_1_1vector3_1a291c8f4ebbac2a3fb1fee59ee28ed6c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3_1a291c8f4ebbac2a3fb1fee59ee28ed6c2" kindref="member">y</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{<sp/>m_y<sp/>=<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1a291c8f4ebbac2a3fb1fee59ee28ed6c2" kindref="member">y</ref>;<sp/>}</highlight></codeline>
<codeline lineno="156" refid="classrcppsw_1_1math_1_1vector3_1ae1e7015cf7b040f4e1b0aacd794b2b91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3_1ae1e7015cf7b040f4e1b0aacd794b2b91" kindref="member">z</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>z)<sp/>{<sp/>m_z<sp/>=<sp/><ref refid="classrcppsw_1_1math_1_1vector3_1ae1e7015cf7b040f4e1b0aacd794b2b91" kindref="member">z</ref>;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classrcppsw_1_1math_1_1vector3_1a1a4e7832538fbc198c08ed30e5cdbbd4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref><sp/>to_2D(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref>(<ref refid="classrcppsw_1_1math_1_1vector3_1a1a4e7832538fbc198c08ed30e5cdbbd4" kindref="member">x</ref>(),<sp/>y());<sp/>}</highlight></codeline>
<codeline lineno="159" refid="classrcppsw_1_1math_1_1vector3_1ad9f4def6cf134f23a899f1f77ad9fae9" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="170" refid="classrcppsw_1_1math_1_1vector3_1ae5d6e4c3ec99f5f4c3983de6b43f1ee1" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_pd(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_y<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_z<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_psd(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>m_y<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>m_z<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>square_length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>*<sp/>m_x)<sp/>+<sp/>(m_y<sp/>*<sp/>m_y)<sp/>+<sp/>(m_z<sp/>*<sp/>m_z);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(square_length());<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(std::is_floating_point&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>vector3&amp;<sp/><ref refid="namespacercppsw_1_1math_1a394f87378955773f4b26f4ee11f8e3c9" kindref="member">normalize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>/=<sp/>this-&gt;length();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209" refid="classrcppsw_1_1math_1_1vector3_1ae41ac681f082dd801b6ad9d1db95f8af" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/>mask(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>the_mask)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>(m_x<sp/>*<sp/>the_mask.m_x,<sp/>m_y<sp/>*<sp/>the_mask.m_y,<sp/>m_z<sp/>*<sp/>the_mask.m_z);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref><sp/>xangle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>(std::atan2(m_z,<sp/>m_y));<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>radians<sp/>yangle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>radians(std::atan2(m_x,<sp/>m_z));<sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>radians<sp/>zangle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>radians(std::atan2(m_y,<sp/>m_x));<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>vector2&lt;T&gt;<sp/>project_on_xy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;(m_x,<sp/>m_y);<sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>vector2&lt;T&gt;<sp/>project_on_yz(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;(m_y,<sp/>m_z);<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>vector2&lt;T&gt;<sp/>project_on_xz(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;(m_x,<sp/>m_z);<sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>sphere_vector&lt;T&gt;<sp/>to_spherical(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="251" refid="classrcppsw_1_1math_1_1vector3_1a0a2270f74ac620c48125a88a2706d2ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>length();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1sphere__vector" kindref="compound">sphere_vector&lt;T&gt;</ref>(</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius,<sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>(std::acos(m_z<sp/>/<sp/>radius)),<sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>(std::atan2(m_y,<sp/>m_x)));</highlight></codeline>
<codeline lineno="254" refid="classrcppsw_1_1math_1_1vector3_1a0b454e398870a844c776cf4f144ef951" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scale_x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scale_y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scale_z)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>*=<sp/>scale_x;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>*=<sp/>scale_y;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>*=<sp/>scale_z;</highlight></codeline>
<codeline lineno="269" refid="classrcppsw_1_1math_1_1vector3_1ac027990eb820257587b44a13e315f1c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>factor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale(factor,<sp/>factor,<sp/>factor);<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Relational<sp/>operators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(!std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a53c97519cd1429ba1ea1ace8ba1e0a4c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>==<sp/>other.m_x<sp/>&amp;&amp;<sp/>m_y<sp/>==<sp/>other.m_y<sp/>&amp;&amp;<sp/>m_z<sp/>==<sp/>other.m_z);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a53c97519cd1429ba1ea1ace8ba1e0a4c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::fabs(x()<sp/>-<sp/>other.x())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::fabs(y()<sp/>-<sp/>other.y())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::fabs(z()<sp/>-<sp/>other.z())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>);</highlight></codeline>
<codeline lineno="305" refid="classrcppsw_1_1math_1_1vector3_1a2d40303f578168224e057f0b406388c9" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(!std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>&gt;<sp/>other.m_x)<sp/>||<sp/>((m_x<sp/>==<sp/>other.m_x)<sp/>&amp;&amp;<sp/>(m_y<sp/>&gt;<sp/>other.m_y))<sp/>||</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((m_x<sp/>==<sp/>other.m_x)<sp/>&amp;&amp;<sp/>(m_y<sp/>==<sp/>other.m_y)<sp/>&amp;&amp;<sp/>(m_z<sp/>&gt;<sp/>other.m_z));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312" refid="classrcppsw_1_1math_1_1vector3_1a2c051ae63c3855eee41cf12ff81096cd" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_x<sp/>=<sp/>std::fabs(m_x<sp/>-<sp/>other.m_x)<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_y<sp/>=<sp/>std::fabs(m_y<sp/>-<sp/>other.m_y)<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="classrcppsw_1_1math_1_1vector3_1a2c051ae63c3855eee41cf12ff81096cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>&gt;<sp/>other.m_x)<sp/>||<sp/>(equal_x<sp/>&amp;&amp;<sp/>(m_y<sp/>&gt;<sp/>other.m_y))<sp/>||</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(equal_x<sp/>&amp;&amp;<sp/>equal_y<sp/>&amp;&amp;<sp/>(m_z<sp/>&gt;<sp/>other.m_z));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>modifier<sp/>operators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>vector3&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="333" refid="classrcppsw_1_1math_1_1vector3_1a03cd69520169ee49edc9d3e585529262" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>+=<sp/>other.m_x;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>+=<sp/>other.m_y;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>+=<sp/>other.m_z;</highlight></codeline>
<codeline lineno="336" refid="classrcppsw_1_1math_1_1vector3_1a8be1ab84c0fc3ac51355b7347ff18e1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>-=<sp/>other.m_x;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>-=<sp/>other.m_y;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>-=<sp/>other.m_z;</highlight></codeline>
<codeline lineno="343" refid="classrcppsw_1_1math_1_1vector3_1a9f1949fc3bf3925d01ecd47cd5c5705c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="350" refid="classrcppsw_1_1math_1_1vector3_1a953c4eb0133320addd861608161bf190" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>operator/=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>m_z<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="357" refid="classrcppsw_1_1math_1_1vector3_1a9a0d83dc5e6d9e346687c8e509369f92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/><ref refid="namespacercppsw_1_1types_1a27802aa16293b7b518133955db138a4b" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>other;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="364" refid="classrcppsw_1_1math_1_1vector3_1a72322a01ac4b0f852c1b9ec6f5153a5c" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref><sp/><ref refid="namespacercppsw_1_1math_1ac21a96f6ef02624e0dc8742625e7ccce" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>-=<sp/>other;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="370" refid="classrcppsw_1_1math_1_1vector3_1adef32e4a5953b5da3f27d46200dae1ca" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/><ref refid="namespacercppsw_1_1math_1af676ea466603dec88e6310deccc2d150" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="376" refid="classrcppsw_1_1math_1_1vector3_1a66afcd7b1135737a499f5e77aa817153" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/><ref refid="namespacercppsw_1_1math_1afd8c377515b4ac3383951e754edc9d20" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="382" refid="classrcppsw_1_1math_1_1vector3_1ada42e246e5ff48f8b34a28706cba0fdc" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref><sp/><ref refid="namespacercppsw_1_1math_1ac21a96f6ef02624e0dc8742625e7ccce" kindref="member">operator-</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3</ref>(-m_x,<sp/>-m_y,<sp/>-m_z);<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacercppsw_1_1math_1ab9a74f174a2ea8affb6bff17a1179394" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector3&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>v.to_str();</highlight></codeline>
<codeline lineno="388" refid="classrcppsw_1_1math_1_1vector3_1a8311b043688e8046ba24a89ac6455278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390" refid="classrcppsw_1_1math_1_1vector3_1a1863fd7f5a2da8679ca0bc725f1f00bb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::istream&amp;<sp/>operator&gt;&gt;(std::istream&amp;<sp/>is,<sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;T&gt;</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>values[3]<sp/>=<sp/>{<sp/>T(),<sp/>T(),<sp/>T()<sp/>};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>utils::parse_values&lt;T&gt;(is,<sp/>3,<sp/>values,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>v.set(values[0],<sp/>values[1],<sp/>values[2]);</highlight></codeline>
<codeline lineno="398" refid="classrcppsw_1_1math_1_1vector3_1a9c58ecd78127822b1012ec5675efbb74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>std::string<sp/>to_str(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacercppsw_1a067e7fdc1e45476ca82cb106d0809015" kindref="member">rcppsw::to_string</ref>(m_x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacercppsw_1a067e7fdc1e45476ca82cb106d0809015" kindref="member">rcppsw::to_string</ref>(m_y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacercppsw_1a067e7fdc1e45476ca82cb106d0809015" kindref="member">rcppsw::to_string</ref>(m_z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405" refid="classrcppsw_1_1math_1_1vector3_1af3f46555472226e6249d1d0a4c73c749" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>T<sp/>m_x{0};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>T<sp/>m_y{0};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>T<sp/>m_z{0};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>Template<sp/>Specializations</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="420"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a013f4548331430677be3d5c65796845a" kindref="member">vector3i</ref><sp/>=<sp/>vector3&lt;int&gt;;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a72e9a2c7f7fb0b33f22a664371912a36" kindref="member">vector3z</ref><sp/>=<sp/>vector3&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1af66a56a5aa1b099f8fa9da9a346847f3" kindref="member">vector3d</ref><sp/>=<sp/>vector3&lt;double&gt;;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a013f4548331430677be3d5c65796845a" kindref="member">vector3i</ref><sp/>vector3i::X;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a013f4548331430677be3d5c65796845a" kindref="member">vector3i</ref><sp/>vector3i::Y;</highlight></codeline>
<codeline lineno="434" refid="namespacercppsw_1_1math_1af66a56a5aa1b099f8fa9da9a346847f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3i</ref><sp/>vector3i::Z;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3z</ref><sp/>vector3z::X;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3z</ref><sp/>vector3z::Y;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3z</ref><sp/>vector3z::Z;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3d</ref><sp/>vector3d::X;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3d</ref><sp/>vector3d::Y;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3d</ref><sp/>vector3d::Z;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>Macros</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC3_DIRECT_CONV2FLT(prefix)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector3d<sp/>prefix##vec2dvec(const<sp/>vector3##prefix&amp;<sp/>other)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>vector3d(other.x(),<sp/>other.y(),<sp/>other.z());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="vector3_8hpp_1a63b83599fd7a2a3ceb1d533de12e08bc" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC3_SCALED_CONV2FLT(prefix)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector3d<sp/>prefix##vec2dvec(const<sp/>vector3##prefix&amp;<sp/>other,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>scale)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>vector3d(other.x()<sp/>*<sp/>scale,<sp/>other.y()<sp/>*<sp/>scale,<sp/>other.z()<sp/>*<sp/>scale);<sp/>\</highlight></codeline>
<codeline lineno="464" refid="vector3_8hpp_1a86aae9da4652f9e2ccc53cca4254e6c2" refkind="member"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC3_CONV2DISC(dest_prefix,<sp/>dest_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector3##dest_prefix<sp/>dvec2##dest_prefix##vec(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>vector3d&amp;<sp/>other,<sp/>double<sp/>scale)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>return<sp/>vector3##dest_prefix(static_cast&lt;dest_type&gt;(other.x()<sp/>/<sp/>scale),<sp/><sp/>\</highlight></codeline>
<codeline lineno="474" refid="vector3_8hpp_1ab614500b7244cb771163840bf272433a" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;dest_type&gt;(other.y()<sp/>/<sp/>scale),<sp/><sp/>\</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;dest_type&gt;(other.z()<sp/>/<sp/>scale));<sp/>\</highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>Conversion<sp/>Functions</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="vector3_8hpp_1a63b83599fd7a2a3ceb1d533de12e08bc" kindref="member">RCPPSW_MATH_VEC3_DIRECT_CONV2FLT</ref>(i);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="vector3_8hpp_1a63b83599fd7a2a3ceb1d533de12e08bc" kindref="member">RCPPSW_MATH_VEC3_DIRECT_CONV2FLT</ref>(z);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="vector3_8hpp_1a86aae9da4652f9e2ccc53cca4254e6c2" kindref="member">RCPPSW_MATH_VEC3_SCALED_CONV2FLT</ref>(i);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="vector3_8hpp_1a86aae9da4652f9e2ccc53cca4254e6c2" kindref="member">RCPPSW_MATH_VEC3_SCALED_CONV2FLT</ref>(z);</highlight></codeline>
<codeline lineno="485" refid="namespacercppsw_1_1math_1a0a921ed8e23896267d945d86340ffd1d" refkind="member"><highlight class="normal"><ref refid="vector3_8hpp_1ab614500b7244cb771163840bf272433a" kindref="member">RCPPSW_MATH_VEC3_CONV2DISC</ref>(z,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486" refid="namespacercppsw_1_1math_1a6590e524799ca25849ac5a49f93e07ee" refkind="member"><highlight class="normal"><ref refid="vector3_8hpp_1ab614500b7244cb771163840bf272433a" kindref="member">RCPPSW_MATH_VEC3_CONV2DISC</ref>(i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487" refid="namespacercppsw_1_1math_1aff1888ba00c80210c00d8c55ee0dba2d" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="namespacercppsw_1_1math_1a454f55be44625cec03576bd2641e4a96" refkind="member"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="489" refid="namespacercppsw_1_1math_1a08e7a8d5d252fa7672c53e387bd6b807" refkind="member"><highlight class="comment"><sp/>*<sp/>Free<sp/>Functions</highlight></codeline>
<codeline lineno="490" refid="namespacercppsw_1_1math_1af7679ef40e012ce00d194ceaf7c536b8" refkind="member"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="494"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;U&gt;::value),</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;V&gt;::value)&gt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a3da7d798817b70e4de41527fabdbfc2f" kindref="member">l1norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;U&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector3" kindref="compound">vector3&lt;V&gt;</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.x()<sp/>-<sp/>v2.x()))<sp/>+</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.y()<sp/>-<sp/>v2.y()))<sp/>+</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.z()<sp/>-<sp/>v2.z()));</highlight></codeline>
<codeline lineno="502" refid="namespacercppsw_1_1math_1a3da7d798817b70e4de41527fabdbfc2f" refkind="member"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="common_2macros_8hpp_1af6c55b58384045452cc8ce88f54e3265" kindref="member">NS_END</ref>(math,<sp/><ref refid="namespacercppsw" kindref="compound">rcppsw</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_RCPPSW_MATH_VECTOR3_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp"/>
  </compounddef>
</doxygen>
