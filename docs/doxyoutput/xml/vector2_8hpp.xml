<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="vector2_8hpp" kind="file" language="C++">
    <compoundname>vector2.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes refid="radians_8hpp" local="yes">rcppsw/math/radians.hpp</includes>
    <includes refid="rcppsw_8hpp" local="yes">rcppsw/rcppsw.hpp</includes>
    <includes refid="discretize__ratio_8hpp" local="yes">rcppsw/types/discretize_ratio.hpp</includes>
    <includes refid="stringizable_8hpp" local="yes">rcppsw/er/stringizable.hpp</includes>
    <includedby refid="convex__hull2D_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/algorithm/convex_hull2D.hpp</includedby>
    <includedby refid="base__grid2D_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid2D.hpp</includedby>
    <includedby refid="base__grid__overlay_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid_overlay.hpp</includedby>
    <includedby refid="rtree_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/rtree.hpp</includedby>
    <includedby refid="stacked__grid2D_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/ds/stacked_grid2D.hpp</includedby>
    <includedby refid="spatial_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/math/spatial.hpp</includedby>
    <includedby refid="vector3_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp</includedby>
    <includedby refid="base__manager_8hpp" local="yes">/home/jharwell/git/rcppsw/include/rcppsw/metrics/base_manager.hpp</includedby>
    <incdepgraph>
      <node id="33">
        <label>rcppsw/math/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="24">
        <label>boost/stacktrace.hpp</label>
      </node>
      <node id="12">
        <label>log4cxx/fileappender.h</label>
      </node>
      <node id="19">
        <label>rcsw/common/common.h</label>
        <link refid="common_8h.html" external="/home/jharwell/git/rcppsw/build/docs/rcsw/RCSW.tag"/>
      </node>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp</label>
        <link refid="vector2_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>rcppsw/common/common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>rcppsw/utils/string_utils.hpp</label>
        <link refid="string__utils_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>log4cxx/xml/domconfigurator.h</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="26">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>rcppsw/er/stacktrace.hpp</label>
        <link refid="stacktrace_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="6">
        <label>rcppsw/math/range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>log4cxx/patternlayout.h</label>
      </node>
      <node id="17">
        <label>rcppsw/rcppsw.hpp</label>
        <link refid="rcppsw_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>log4cxx/ndc.h</label>
      </node>
      <node id="11">
        <label>log4cxx/consoleappender.h</label>
      </node>
      <node id="9">
        <label>rcppsw/er/er.hpp</label>
        <link refid="er_8hpp"/>
      </node>
      <node id="21">
        <label>rcppsw/mpl/mpl.hpp</label>
        <link refid="mpl_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>vector</label>
      </node>
      <node id="32">
        <label>rcppsw/er/stringizable.hpp</label>
        <link refid="stringizable_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="25">
        <label>array</label>
      </node>
      <node id="30">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>rcppsw/math/radians.hpp</label>
        <link refid="radians_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iosfwd</label>
      </node>
      <node id="27">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>rcppsw/common/macros.hpp</label>
        <link refid="common_2macros_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>rcppsw/types/discretize_ratio.hpp</label>
        <link refid="discretize__ratio_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rcppsw/er/client.hpp</label>
        <link refid="client_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>type_traits</label>
      </node>
      <node id="22">
        <label>rcppsw/er/macros.hpp</label>
        <link refid="er_2macros_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="36">
        <label>rcppsw/types/named_type.hpp</label>
        <link refid="named__type_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="36">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/register_with_sink.hpp</label>
        <link refid="register__with__sink_8hpp"/>
      </node>
      <node id="13">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/spatial.hpp</label>
        <link refid="spatial_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_data.hpp</label>
        <link refid="grid3D__metrics__data_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp</label>
        <link refid="vector2_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter_data.hpp</label>
        <link refid="hgrid3D__view__filter__data_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graphml.hpp</label>
        <link refid="graphml_8hpp"/>
      </node>
      <node id="11">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid3D_overlay.hpp</label>
        <link refid="grid3D__overlay_8hpp"/>
      </node>
      <node id="8">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid2D_overlay.hpp</label>
        <link refid="grid2D__overlay_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid3D.hpp</label>
        <link refid="base__grid3D_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/file_sink_registerer.hpp</label>
        <link refid="file__sink__registerer_8hpp"/>
      </node>
      <node id="16">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D.hpp</label>
        <link refid="hgrid3D_8hpp"/>
      </node>
      <node id="31">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/base_manager.hpp</label>
        <link refid="base__manager_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view.hpp</label>
        <link refid="hgrid3D__view_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid2D.hpp</label>
        <link refid="base__grid2D_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/base_grid_overlay.hpp</label>
        <link refid="base__grid__overlay_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_output_manager.hpp</label>
        <link refid="network__output__manager_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_collector.hpp</label>
        <link refid="grid3D__metrics__collector_8hpp"/>
      </node>
      <node id="4">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid2D.hpp</label>
        <link refid="grid2D_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid2D_metrics_data.hpp</label>
        <link refid="grid2D__metrics__data_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/network_sink_registerer.hpp</label>
        <link refid="network__sink__registerer_8hpp"/>
      </node>
      <node id="24">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/directed_graph.hpp</label>
        <link refid="directed__graph_8hpp"/>
      </node>
      <node id="12">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/rtree.hpp</label>
        <link refid="rtree_8hpp"/>
      </node>
      <node id="28">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_vertex_property.hpp</label>
        <link refid="hgrid3D__vertex__property_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/stacked_grid2D.hpp</label>
        <link refid="stacked__grid2D_8hpp"/>
      </node>
      <node id="19">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/grid3D.hpp</label>
        <link refid="grid3D_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid2D_metrics_csv_sink.hpp</label>
        <link refid="grid2D__metrics__csv__sink_8hpp"/>
      </node>
      <node id="29">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_spec.hpp</label>
        <link refid="hgrid3D__spec_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid3D_metrics_csv_sink.hpp</label>
        <link refid="grid3D__metrics__csv__sink_8hpp"/>
      </node>
      <node id="2">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/algorithm/convex_hull2D.hpp</label>
        <link refid="convex__hull2D_8hpp"/>
      </node>
      <node id="26">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_builder.hpp</label>
        <link refid="hgrid3D__view__builder_8hpp"/>
      </node>
      <node id="32">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/metrics/fs_output_manager.hpp</label>
        <link refid="fs__output__manager_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/metrics/grid2D_metrics_collector.hpp</label>
        <link refid="grid2D__metrics__collector_8hpp"/>
      </node>
      <node id="27">
        <label>/home/jharwell/git/rcppsw/include/rcppsw/ds/graph/hgrid3D_view_filter.hpp</label>
        <link refid="hgrid3D__view__filter_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classrcppsw_1_1math_1_1vector2" prot="public">rcppsw::math::vector2</innerclass>
    <innerclass refid="structrcppsw_1_1math_1_1vector2_1_1componentwise__compare" prot="public">rcppsw::math::vector2::componentwise_compare</innerclass>
    <innerclass refid="structrcppsw_1_1math_1_1vector2_1_1key__compare" prot="public">rcppsw::math::vector2::key_compare</innerclass>
    <innernamespace refid="namespacercppsw">rcppsw</innernamespace>
    <innernamespace refid="namespacercppsw_1_1math">rcppsw::math</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="vector2_8hpp_1a867d642347f002235bbcade5a7231665" prot="public" static="no">
        <name>RCPPSW_MATH_VEC2_CONV2DISC</name>
        <param><defname>dest_prefix</defname></param>
        <param><defname>dest_type</defname></param>
        <initializer>  static inline vector2##dest_prefix dvec2##dest_prefix##vec(               \
      const vector2d&amp; other, double scale) {                                \
    return vector2##dest_prefix(static_cast&lt;dest_type&gt;(other.x() / scale),  \
                                static_cast&lt;dest_type&gt;(other.y() / scale)); \
  }</initializer>
        <briefdescription>
<para>Convert vector2d -&gt; vector2{i,u,z}, applying a divisive scaling factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" line="435" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vector2_8hpp_1a146127190fb994d3714b251195de4b22" prot="public" static="no">
        <name>RCPPSW_MATH_VEC2_DIRECT_CONVF</name>
        <param><defname>prefix</defname></param>
        <initializer>  static inline vector2d prefix##vec2dvec(const vector2##prefix&amp; other) { \
    return vector2d(other.x(), other.y());                                \
  }</initializer>
        <briefdescription>
<para>Convert vector2{i,u,z} -&gt; vector2d directly, without applying any scaling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" line="416" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vector2_8hpp_1a89ca2cc16241d7a099c317cb94416f04" prot="public" static="no">
        <name>RCPPSW_MATH_VEC2_SCALED_CONVF</name>
        <param><defname>prefix</defname></param>
        <initializer>  static inline vector2d prefix##vec2dvec(const vector2##prefix&amp; other, \
                                          double scale) {               \
    return vector2d(other.x() * scale, other.y() * scale);              \
  }</initializer>
        <briefdescription>
<para>Convert vector2{i,u,z} -&gt; vector2d, applying a multiplicative scaling factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" line="425" column="9" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp" bodystart="429" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2018 John Harwell, All rights reserved.</para>
</simplesect>
This file is part of RCPPSW.</para>
<para>RCPPSW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para>
<para>RCPPSW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para>
<para>You should have received a copy of the GNU General Public License along with RCPPSW. If not, see &lt;<ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>INCLUDE_RCPPSW_MATH_VECTOR2_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_RCPPSW_MATH_VECTOR2_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="radians_8hpp" kindref="compound">rcppsw/math/radians.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rcppsw_8hpp" kindref="compound">rcppsw/rcppsw.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="discretize__ratio_8hpp" kindref="compound">rcppsw/types/discretize_ratio.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringizable_8hpp" kindref="compound">rcppsw/er/stringizable.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Namespaces/Decls</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="common_2macros_8hpp_1a553c4f9d95d9ac867c32675925e86368" kindref="member">NS_START</ref>(<ref refid="namespacercppsw" kindref="compound">rcppsw</ref>,<sp/>math);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>Class<sp/>Definitions</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="54"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">vector2<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>er::stringizable<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">key_compare<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&lt;U&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&lt;U&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66" refid="structrcppsw_1_1math_1_1vector2_1_1key__compare" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Order<sp/>based<sp/>on<sp/>X<sp/>unless<sp/>X&apos;s<sp/>are<sp/>equal,<sp/>if<sp/>so<sp/>order<sp/>on<sp/>Y,<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.x()<sp/>!=<sp/>rhs.x())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;<sp/>rhs.x();</highlight></codeline>
<codeline lineno="69" refid="structrcppsw_1_1math_1_1vector2_1_1key__compare_1a25daf3d229e29e5b75fc074bf135977b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.y()<sp/>&lt;<sp/>rhs.y();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(std::is_floating_point&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;U&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;U&gt;</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_x<sp/>=<sp/>std::fabs(lhs.x()<sp/>-<sp/>rhs.x())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!equal_x)<sp/>{</highlight></codeline>
<codeline lineno="78" refid="structrcppsw_1_1math_1_1vector2_1_1key__compare_1a25daf3d229e29e5b75fc074bf135977b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;<sp/>rhs.x();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.y()<sp/>&lt;<sp/>rhs.y();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">componentwise_compare<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&lt;T&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.x()<sp/>&lt;=<sp/>rhs.x()<sp/>&amp;&amp;<sp/>lhs.y()<sp/>&lt;=<sp/>rhs.y();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91" refid="structrcppsw_1_1math_1_1vector2_1_1componentwise__compare" refkind="compound"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="92" refid="structrcppsw_1_1math_1_1vector2_1_1componentwise__compare_1ace479ac4b6cffc43131b9851baead20f" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kDIMENSIONALITY<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref><sp/>X;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref><sp/>Y;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;U&gt;::value),</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;V&gt;::value)&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a97ff44efd91cc0c6f7bde760e9d62ae1" kindref="member">l1norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;U&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;V&gt;</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.x()<sp/>-<sp/>v2.x()))<sp/>+</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.y()<sp/>-<sp/>v2.y()));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116" refid="classrcppsw_1_1math_1_1vector2_1ae022f14d7122d578f70a19a15dbe4505" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>noexcept<sp/>:<sp/>m_x(x),<sp/>m_y(y)<sp/>{}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>&amp;<sp/>angle)<sp/>noexcept</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_x(std::cos(angle.v())<sp/>*<sp/>length),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_y(std::sin(angle.v())<sp/>*<sp/>length)<sp/>{}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classrcppsw_1_1math_1_1vector2_1a0ba40675c3c7ca4923551bb43a406115" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>x(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x;<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>y(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_y;<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x;<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_y;<sp/>}</highlight></codeline>
<codeline lineno="145" refid="classrcppsw_1_1math_1_1vector2_1af6b34be0d7fab15a93723bf246171910" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2_1af6b34be0d7fab15a93723bf246171910" kindref="member">x</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/>m_x<sp/>=<sp/><ref refid="classrcppsw_1_1math_1_1vector2_1af6b34be0d7fab15a93723bf246171910" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="146" refid="classrcppsw_1_1math_1_1vector2_1aea0d9eeaaf6e39905818271cf972cc36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2_1aea0d9eeaaf6e39905818271cf972cc36" kindref="member">y</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{<sp/>m_y<sp/>=<sp/><ref refid="classrcppsw_1_1math_1_1vector2_1aea0d9eeaaf6e39905818271cf972cc36" kindref="member">y</ref>;<sp/>}</highlight></codeline>
<codeline lineno="147" refid="classrcppsw_1_1math_1_1vector2_1ab49ec569e91bc163cca609c9b9a4e602" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_pd(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_y<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_psd(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_x<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>m_y<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168" refid="classrcppsw_1_1math_1_1vector2_1a64d5d47b4abcafa40e7737479caf9158" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_from_polar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>=<sp/>std::cos(angle.<ref refid="classrcppsw_1_1math_1_1radians_1ae9552b3ff8dcb07c7401bb22ec0ef682" kindref="member">v</ref>())<sp/>*<sp/>length;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>=<sp/>std::sin(angle.<ref refid="classrcppsw_1_1math_1_1radians_1ae9552b3ff8dcb07c7401bb22ec0ef682" kindref="member">v</ref>())<sp/>*<sp/>length;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180" refid="classrcppsw_1_1math_1_1vector2_1aee877a4058765564791575ab19f2f0f5" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/>T<sp/>square_length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>*<sp/>m_x)<sp/>+<sp/>(m_y<sp/>*<sp/>m_y);<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="common_2macros_8hpp_1a4160e6a58445c478750f981632097665" kindref="member">RCPPSW_NODISCARD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(square_length());<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>vector2&amp;<sp/><ref refid="namespacercppsw_1_1math_1a394f87378955773f4b26f4ee11f8e3c9" kindref="member">normalize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>/=<sp/>this-&gt;length();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205" refid="classrcppsw_1_1math_1_1vector2_1ad0c6da565111c56585a8a36fb48ce321" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref><sp/>angle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>(std::atan2(m_y,<sp/>m_x));<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>rotate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1radians" kindref="compound">radians</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sin_val,<sp/>cos_val;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>::sincos(angle.<ref refid="classrcppsw_1_1math_1_1radians_1ae9552b3ff8dcb07c7401bb22ec0ef682" kindref="member">v</ref>(),<sp/>&amp;sin_val,<sp/>&amp;cos_val);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>=<sp/>m_x<sp/>*<sp/>cos_val<sp/>-<sp/>m_y<sp/>*<sp/>sin_val;</highlight></codeline>
<codeline lineno="225" refid="classrcppsw_1_1math_1_1vector2_1a6d8f8da9866d4c88997ef4070c990a43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>=<sp/>m_x<sp/>*<sp/>sin_val<sp/>+<sp/>m_y<sp/>*<sp/>cos_val;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scale_x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scale_y)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>*=<sp/>scale_x;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>*=<sp/>scale_y;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241" refid="classrcppsw_1_1math_1_1vector2_1acd1742b5f06be9d11b3a5b8729f3586c" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>scale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>factor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale(factor,<sp/>factor);<sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>relational<sp/>operators<sp/>*/</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(!std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a53c97519cd1429ba1ea1ace8ba1e0a4c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>==<sp/>other.m_x<sp/>&amp;&amp;<sp/>m_y<sp/>==<sp/>other.m_y);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a53c97519cd1429ba1ea1ace8ba1e0a4c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::fabs(x()<sp/>-<sp/>other.x())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::fabs(y()<sp/>-<sp/>other.y())<sp/>&lt;=<sp/><ref refid="namespacercppsw_1_1math_1a3de3b99c93e96d09928476864d7ecf59" kindref="member">kDOUBLE_EPSILON</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275" refid="classrcppsw_1_1math_1_1vector2_1a19bf17e72c5665104d97ec590025cbc9" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(!std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>&lt;<sp/>other.m_x)<sp/>||<sp/>((m_x<sp/>==<sp/>other.m_x)<sp/>&amp;&amp;<sp/>(m_y<sp/>&lt;<sp/>other.m_y));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="classrcppsw_1_1math_1_1vector2_1adf05073902c035328fa17711b777aecc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T,<sp/>RCPPSW_SFINAE_DECLDEF(!std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_x<sp/>&gt;<sp/>other.m_x)<sp/>||<sp/>((m_x<sp/>==<sp/>other.m_x)<sp/>&amp;&amp;<sp/>(m_y<sp/>&gt;<sp/>other.m_y));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="classrcppsw_1_1math_1_1vector2_1a07b4f802e8d0db5d970ff2429688d544" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1types_1ac22882e200d1ff6bc2933e156640e01d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;<sp/>other<sp/>||<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="classrcppsw_1_1math_1_1vector2_1aec7108fb58050b2133ea1f16ec9326b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&gt;<sp/>other<sp/>||<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>modifier<sp/>operators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>vector2&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="307" refid="classrcppsw_1_1math_1_1vector2_1aece5bee19d9750547d2aa7c910461949" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>+=<sp/>other.m_x;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>+=<sp/>other.m_y;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310" refid="classrcppsw_1_1math_1_1vector2_1ab7e8a33e958bea218a71dd4723ba25ce" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>-=<sp/>other.m_x;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>-=<sp/>other.m_y;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316" refid="classrcppsw_1_1math_1_1vector2_1a1f58836d47916598211295947745aec0" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>operator*=(T<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322" refid="classrcppsw_1_1math_1_1vector2_1a9837f0b42cd764b9bbea27427666a4f7" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>operator/=(T<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>m_y<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328" refid="classrcppsw_1_1math_1_1vector2_1a73487d60a055da721bfc0a4e9ad55641" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/><ref refid="namespacercppsw_1_1types_1a27802aa16293b7b518133955db138a4b" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>other;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="334" refid="classrcppsw_1_1math_1_1vector2_1a655d7521092e47fd6e8a6d58dda26b6d" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref><sp/><ref refid="namespacercppsw_1_1math_1ac21a96f6ef02624e0dc8742625e7ccce" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>-=<sp/>other;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="340" refid="classrcppsw_1_1math_1_1vector2_1af22a050079f8f9a719420c1d4abdd90a" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/><ref refid="namespacercppsw_1_1math_1af676ea466603dec88e6310deccc2d150" kindref="member">operator*</ref>(T<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="346" refid="classrcppsw_1_1math_1_1vector2_1a09dc555a2cebcd5d54c95624c572c58d" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/><ref refid="namespacercppsw_1_1math_1afd8c377515b4ac3383951e754edc9d20" kindref="member">operator/</ref>(T<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>/=<sp/>val;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="352" refid="classrcppsw_1_1math_1_1vector2_1a079a41ccc0bc9fe6e64c1d6e3a522399" refkind="member"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref><sp/><ref refid="namespacercppsw_1_1math_1ac21a96f6ef02624e0dc8742625e7ccce" kindref="member">operator-</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2</ref>(-m_x,<sp/>-m_y);<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacercppsw_1_1math_1ab9a74f174a2ea8affb6bff17a1179394" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector2&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>v.to_str();</highlight></codeline>
<codeline lineno="358" refid="classrcppsw_1_1math_1_1vector2_1a8a5d8e95fa268af6f73edbe42e32ce22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360" refid="classrcppsw_1_1math_1_1vector2_1a5316cad4bb288e7d083ce3126c9657c2" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::istream&amp;<sp/>operator&gt;&gt;(std::istream&amp;<sp/>is,<sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;T&gt;</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>values[2]<sp/>=<sp/>{<sp/>T(),<sp/>T()<sp/>};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>utils::parse_values&lt;T&gt;(is,<sp/>2,<sp/>values,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>v.set(values[0],<sp/>values[1]);</highlight></codeline>
<codeline lineno="368" refid="classrcppsw_1_1math_1_1vector2_1aba90eb5fb6550060c108da4008962358" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>std::string<sp/>to_str(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacercppsw_1a067e7fdc1e45476ca82cb106d0809015" kindref="member">rcppsw::to_string</ref>(m_x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacercppsw_1a067e7fdc1e45476ca82cb106d0809015" kindref="member">rcppsw::to_string</ref>(m_y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="classrcppsw_1_1math_1_1vector2_1a234346d2bf083d6effbbc67b21369fe2" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>T<sp/>m_x{0};</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>T<sp/>m_y{0};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>Template<sp/>Specializations</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="388"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a5b451219559579141b097391f9fc0e80" kindref="member">vector2i</ref><sp/>=<sp/>vector2&lt;int&gt;;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1aa61ac5b9e211ad9913993fe03c12af7c" kindref="member">vector2z</ref><sp/>=<sp/>vector2&lt;size_t&gt;;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1aeee4cbfec7ec35d102de51e287b8edeb" kindref="member">vector2d</ref><sp/>=<sp/>vector2&lt;double&gt;;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a5b451219559579141b097391f9fc0e80" kindref="member">vector2i</ref><sp/>vector2i::X;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a5b451219559579141b097391f9fc0e80" kindref="member">vector2i</ref><sp/>vector2i::Y;</highlight></codeline>
<codeline lineno="402" refid="namespacercppsw_1_1math_1aeee4cbfec7ec35d102de51e287b8edeb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2z</ref><sp/>vector2z::X;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2z</ref><sp/>vector2z::Y;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2d</ref><sp/>vector2d::X;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2d</ref><sp/>vector2d::Y;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>Macros</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC2_DIRECT_CONVF(prefix)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector2d<sp/>prefix##vec2dvec(const<sp/>vector2##prefix&amp;<sp/>other)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>vector2d(other.x(),<sp/>other.y());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="vector2_8hpp_1a146127190fb994d3714b251195de4b22" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC2_SCALED_CONVF(prefix)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector2d<sp/>prefix##vec2dvec(const<sp/>vector2##prefix&amp;<sp/>other,<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>scale)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>vector2d(other.x()<sp/>*<sp/>scale,<sp/>other.y()<sp/>*<sp/>scale);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="429" refid="vector2_8hpp_1a89ca2cc16241d7a099c317cb94416f04" refkind="member"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor">#define<sp/>RCPPSW_MATH_VEC2_CONV2DISC(dest_prefix,<sp/>dest_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>vector2##dest_prefix<sp/>dvec2##dest_prefix##vec(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>vector2d&amp;<sp/>other,<sp/>double<sp/>scale)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>vector2##dest_prefix(static_cast&lt;dest_type&gt;(other.x()<sp/>/<sp/>scale),<sp/><sp/>\</highlight></codeline>
<codeline lineno="439" refid="vector2_8hpp_1a867d642347f002235bbcade5a7231665" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;dest_type&gt;(other.y()<sp/>/<sp/>scale));<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>Conversion<sp/>Functions</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><ref refid="vector2_8hpp_1a146127190fb994d3714b251195de4b22" kindref="member">RCPPSW_MATH_VEC2_DIRECT_CONVF</ref>(i);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="vector2_8hpp_1a146127190fb994d3714b251195de4b22" kindref="member">RCPPSW_MATH_VEC2_DIRECT_CONVF</ref>(z);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><ref refid="vector2_8hpp_1a89ca2cc16241d7a099c317cb94416f04" kindref="member">RCPPSW_MATH_VEC2_SCALED_CONVF</ref>(i);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="vector2_8hpp_1a89ca2cc16241d7a099c317cb94416f04" kindref="member">RCPPSW_MATH_VEC2_SCALED_CONVF</ref>(z);</highlight></codeline>
<codeline lineno="449" refid="namespacercppsw_1_1math_1aa961b26521f8d4bca4d3421461cee713" refkind="member"><highlight class="normal"><ref refid="vector2_8hpp_1a867d642347f002235bbcade5a7231665" kindref="member">RCPPSW_MATH_VEC2_CONV2DISC</ref>(z,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450" refid="namespacercppsw_1_1math_1a7899ac1ece0936beb822977a9accdfec" refkind="member"><highlight class="normal"><ref refid="vector2_8hpp_1a867d642347f002235bbcade5a7231665" kindref="member">RCPPSW_MATH_VEC2_CONV2DISC</ref>(i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451" refid="namespacercppsw_1_1math_1a670395d2d582fe4ca41d6bb7d44bd940" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="namespacercppsw_1_1math_1ae0228cb269b52f2e835336b600b533aa" refkind="member"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="453" refid="namespacercppsw_1_1math_1a4a74ff2c01803969fd82df02945e7953" refkind="member"><highlight class="comment"><sp/>*<sp/>Free<sp/>Functions</highlight></codeline>
<codeline lineno="454" refid="namespacercppsw_1_1math_1a14ee837e88234393c8920fb33a0824b3" refkind="member"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="458"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;U&gt;::value),</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCPPSW_SFINAE_DECLDEF(!std::is_floating_point&lt;V&gt;::value)&gt;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a97ff44efd91cc0c6f7bde760e9d62ae1" kindref="member">l1norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;U&gt;</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrcppsw_1_1math_1_1vector2" kindref="compound">vector2&lt;V&gt;</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.x()<sp/>-<sp/>v2.x()))<sp/>+</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacercppsw_1_1math_1a08642e8d3e916a6836bd252d108b4d30" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1.y()<sp/>-<sp/>v2.y()));</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466" refid="namespacercppsw_1_1math_1a97ff44efd91cc0c6f7bde760e9d62ae1" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="common_2macros_8hpp_1af6c55b58384045452cc8ce88f54e3265" kindref="member">NS_END</ref>(math,<sp/><ref refid="namespacercppsw" kindref="compound">rcppsw</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_RCPPSW_MATH_VECTOR2_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/math/vector2.hpp"/>
  </compounddef>
</doxygen>
