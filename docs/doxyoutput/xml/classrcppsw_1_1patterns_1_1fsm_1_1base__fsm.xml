<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm" kind="class" language="C++" prot="public">
    <compoundname>rcppsw::patterns::fsm::base_fsm</compoundname>
    <basecompoundref refid="classrcppsw_1_1er_1_1client" prot="public" virt="non-virtual">rcppsw::er::client&lt; base_fsm &gt;</basecompoundref>
    <derivedcompoundref refid="classrcppsw_1_1multithread_1_1mt__fsm" prot="public" virt="non-virtual">rcppsw::multithread::mt_fsm</derivedcompoundref>
    <derivedcompoundref refid="classrcppsw_1_1patterns_1_1fsm_1_1hfsm" prot="public" virt="non-virtual">rcppsw::patterns::fsm::hfsm</derivedcompoundref>
    <includes refid="base__fsm_8hpp" local="no">base_fsm.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a6cb2aa2c1779818d8fb9c23cb54aa4b6" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::m_current_state</definition>
        <argsstring></argsstring>
        <name>m_current_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="245" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1aba9fe0f6d11676eac808c3710cdf99ad" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
        <definition>std::unique_ptr&lt;class event_data&gt; rcppsw::patterns::fsm::base_fsm::m_event_data</definition>
        <argsstring></argsstring>
        <name>m_event_data</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="253" column="19" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adc9b11d363eaa79bf3f4a7fdd3e7c318" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool rcppsw::patterns::fsm::base_fsm::m_event_data_hold</definition>
        <argsstring></argsstring>
        <name>m_event_data_hold</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="252" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ad77b861d41f5ff8500c62a72d7731f9a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool rcppsw::patterns::fsm::base_fsm::m_event_generated</definition>
        <argsstring></argsstring>
        <name>m_event_generated</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="251" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a2d0fb0041a3c1aec61da7b4b25c17b89" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::m_initial_state</definition>
        <argsstring></argsstring>
        <name>m_initial_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="247" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a92821fd9f0f1b124b2b64fe2ae4d92ca" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::m_last_state</definition>
        <argsstring></argsstring>
        <name>m_last_state</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="249" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a5099ed2895571be5932912083385a653" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::m_next_state</definition>
        <argsstring></argsstring>
        <name>m_next_state</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="246" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afe6ea0c6bf8b5c1e2184e8617e2722fa" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::m_previous_state</definition>
        <argsstring></argsstring>
        <name>m_previous_state</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="248" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adb49398f97c7d43ebf86162231003ff4" prot="private" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t rcppsw::patterns::fsm::base_fsm::mc_max_states</definition>
        <argsstring></argsstring>
        <name>mc_max_states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="244" column="37" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a02f75749183246e300210cd6a7a308d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rcppsw::patterns::fsm::base_fsm::base_fsm</definition>
        <argsstring>(const base_fsm &amp;other)</argsstring>
        <name>base_fsm</name>
        <param>
          <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm" kindref="compound">base_fsm</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the FSM to initialize another. Event data and whether or not an event is present is not copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="81" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a6b0ab3c20b50882d7e145bfbabffed92" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>rcppsw::patterns::fsm::base_fsm::base_fsm</definition>
        <argsstring>(uint8_t max_states, uint8_t initial_state=0)</argsstring>
        <name>base_fsm</name>
        <param>
          <type>uint8_t</type>
          <declname>max_states</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>initial_state</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="74" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a14bebe9ef1225637a95971f17734eecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rcppsw::patterns::fsm::base_fsm::~base_fsm</definition>
        <argsstring>(void) override=default</argsstring>
        <name>~base_fsm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a857086bfbdd54b829cf2e839a8f78587" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::current_state</definition>
        <argsstring>(void) const</argsstring>
        <name>current_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current state of the state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="92" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a28dcbf6903171b491f9f49e76b380a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rcppsw::patterns::fsm::base_fsm::init</definition>
        <argsstring>(void)</argsstring>
        <name>init</name>
        <reimplementedby refid="classrcppsw_1_1multithread_1_1mt__fsm_1a712ce65d39e644896cec722296767b86">init</reimplementedby>
        <reimplementedby refid="classrcppsw_1_1patterns_1_1fsm_1_1hfsm_1a6418e104518e7f0b4c6e89e994249b05">init</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize/reset the state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="139" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a585739cca322eda48b2d788e16cb36a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::inject_event</definition>
        <argsstring>(int signal, int type)</argsstring>
        <name>inject_event</name>
        <param>
          <type>int</type>
          <declname>signal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Injects a signal of the specified type into the state machine, causing the state machine to execute and process the signal in its current state. This is the main means of running an FSM. Suitable for handling signals from within FSM states, and allowing outside classes to send whatever signals they want to the FSM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="126" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a5f3eb45a6e8c0d402e8ba3fbe18027eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::inject_event</definition>
        <argsstring>(std::unique_ptr&lt; event_data &gt; event)</argsstring>
        <name>inject_event</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Injects the signal of the specified type from the event argument into the state machine. This variant of <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a585739cca322eda48b2d788e16cb36a3" kindref="member">inject_event()</ref> is provided for use with <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a82ea8aed531c4b4951b095bb863f091f" kindref="member">event_data_hold()</ref>, to avoid the event data overwrite which occurs with the other version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="134" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a22ed6eb5646dd2bfcdfd29effb44c895" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::last_state</definition>
        <argsstring>(void) const</argsstring>
        <name>last_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the state the the state machine was in the last time the state machine was run. </para>
        </briefdescription>
        <detaileddescription>
<para>If a state machine has been in state <computeroutput>A</computeroutput> for the last 3 timesteps, and state <computeroutput>B</computeroutput> before that, and the current state is <computeroutput>A</computeroutput>, then this function will return <computeroutput>A</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="117" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1abc6dd4426ea4b66799d82084301e5d56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::max_states</definition>
        <argsstring>(void) const</argsstring>
        <name>max_states</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the maximum number of states for the state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="97" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a7a56e00ed9b58320416ff440c173fead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm" kindref="compound">base_fsm</ref> &amp;</type>
        <definition>base_fsm&amp; rcppsw::patterns::fsm::base_fsm::operator=</definition>
        <argsstring>(const base_fsm &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm" kindref="compound">base_fsm</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the FSM to initialize another. Event data and whether or not an event is present is not copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="87" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a0d83a8f65d17d2932608bc33aa015581" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::previous_state</definition>
        <argsstring>(void) const</argsstring>
        <name>previous_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the previous state the the state machine was in that is <emphasis>different</emphasis> than the current one. </para>
        </briefdescription>
        <detaileddescription>
<para>If a state machine has been in state <computeroutput>A</computeroutput> for the last 3 timesteps, and state <computeroutput>B</computeroutput> before that, and the current state is <computeroutput>A</computeroutput>, then this function will return <computeroutput>B</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="107" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a7e7f9c272b0db4c1a8766f6f76cb0585" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> *</type>
        <definition>class event_data* rcppsw::patterns::fsm::base_fsm::event_data</definition>
        <argsstring>(void)</argsstring>
        <name>event_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="147" column="20" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ae81d3007d6d0e4aa1b6c9521ae59455f" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> *</type>
        <definition>const class event_data* rcppsw::patterns::fsm::base_fsm::event_data</definition>
        <argsstring>(void) const</argsstring>
        <name>event_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the data associated with an event injected into the state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="146" column="26" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1af18293d39b40e1e2c60a81cded8a9e5a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::event_data_hold</definition>
        <argsstring>(bool b)</argsstring>
        <name>event_data_hold</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Indicate that the current event data should NOT be reset after <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a3c5718316ff2a98a9459307fcf4c148e" kindref="member">state_engine()</ref> returns (default). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="158" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a82ea8aed531c4b4951b095bb863f091f" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcppsw::patterns::fsm::base_fsm::event_data_hold</definition>
        <argsstring>(void) const</argsstring>
        <name>event_data_hold</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="159" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a70d0b834423157fe8b09690afa80a83d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
        <definition>std::unique_ptr&lt;class event_data&gt; rcppsw::patterns::fsm::base_fsm::event_data_release</definition>
        <argsstring>(void)</argsstring>
        <name>event_data_release</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="148" column="19" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adb6921a6426dec4efed0e16cba15cbe4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::external_event</definition>
        <argsstring>(uint8_t new_state)</argsstring>
        <name>external_event</name>
        <param>
          <type>uint8_t</type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="171" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1aa7fbf7096bfea773455ec2f9265e0b1b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rcppsw::patterns::fsm::base_fsm::external_event</definition>
        <argsstring>(uint8_t new_state, std::unique_ptr&lt; class event_data &gt; data)</argsstring>
        <name>external_event</name>
        <reimplementedby refid="classrcppsw_1_1multithread_1_1mt__fsm_1ae49edf11d684e827d1551563bc958ab6">external_event</reimplementedby>
        <param>
          <type>uint8_t</type>
          <declname>new_state</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Generates an external event. The data is passed through the event chain without modification. The FSM owns the event data<ndash/>states should not try to delete it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state machine state to transition to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The event data sent to the state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="169" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a00a0983368a370e3a807a831c24709f4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::generated_event</definition>
        <argsstring>(bool b)</argsstring>
        <name>generated_event</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="151" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a9b5897b7785ebcabce2a118daf57b4a0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcppsw::patterns::fsm::base_fsm::has_generated_event</definition>
        <argsstring>(void)</argsstring>
        <name>has_generated_event</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="152" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ad97c446c7cb456dabbcc93b96b8076c5" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::initial_state</definition>
        <argsstring>(void) const</argsstring>
        <name>initial_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="196" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ab6ab7bbe02e3f0bcdba23e6547d8afa5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::internal_event</definition>
        <argsstring>(uint8_t new_state)</argsstring>
        <name>internal_event</name>
        <param>
          <type>uint8_t</type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="185" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afeb001abffdcc060bde5d9bbdfd1af37" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::internal_event</definition>
        <argsstring>(uint8_t new_state, std::unique_ptr&lt; class event_data &gt; data)</argsstring>
        <name>internal_event</name>
        <param>
          <type>uint8_t</type>
          <declname>new_state</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Generates an internal event. These events are generated while executing within a state machine state. Internal states can pass their own data to other states without worrying about deleting the existing data<ndash/>the FSM owns it and will handle it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The state machine state to transition to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The event data sent to the state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="184" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a2ace41a1c2879201b362ede5898e0047" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::next_state</definition>
        <argsstring>(uint8_t next_state)</argsstring>
        <name>next_state</name>
        <param>
          <type>uint8_t</type>
          <declname>next_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="197" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a363425a1ba6f260851673e2f1b78efee" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rcppsw::patterns::fsm::base_fsm::next_state</definition>
        <argsstring>(void) const</argsstring>
        <name>next_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="195" column="11" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a3c5718316ff2a98a9459307fcf4c148e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::state_engine</definition>
        <argsstring>(void)</argsstring>
        <name>state_engine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="193" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afddb540ea0cc710481164d8a2890fcae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rcppsw::patterns::fsm::base_fsm::state_engine_step</definition>
        <argsstring>(const state_map_ex_row *c_row_ex)</argsstring>
        <name>state_engine_step</name>
        <reimplementedby refid="classrcppsw_1_1patterns_1_1fsm_1_1hfsm_1a40701ed24fbbfa62ca940f2b4b8d9252">state_engine_step</reimplementedby>
        <param>
          <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1state__map__ex__row" kindref="compound">state_map_ex_row</ref> *</type>
          <declname>c_row_ex</declname>
        </param>
        <briefdescription>
<para>Execute one step of the state machine using the extended state definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="234" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a18b15e2f252daaf1e15ee0ea502b5370" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rcppsw::patterns::fsm::base_fsm::state_engine_step</definition>
        <argsstring>(const state_map_row *c_row)</argsstring>
        <name>state_engine_step</name>
        <reimplementedby refid="classrcppsw_1_1patterns_1_1fsm_1_1hfsm_1a0e44197a84df2172440ea87401f1fcbd">state_engine_step</reimplementedby>
        <param>
          <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1state__map__row" kindref="compound">state_map_row</ref> *</type>
          <declname>c_row</declname>
        </param>
        <briefdescription>
<para>Execute one step of the state machine using the simple state definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="228" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a8e5583c34d8c99b092fb60e948748090" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1state__map__row" kindref="compound">state_map_row</ref> *</type>
        <definition>virtual const state_map_row* rcppsw::patterns::fsm::base_fsm::state_map</definition>
        <argsstring>(size_t)</argsstring>
        <name>state_map</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>Gets the state map as defined in the derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>A state machine only needs to return a state map using either <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a8e5583c34d8c99b092fb60e948748090" kindref="member">state_map()</ref> or <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1add40018c388e8fb9f4d76a7df7546582" kindref="member">state_map_ex()</ref> but not both.</para>
<para><simplesect kind="return"><para>The row corresponding to the passed in state in the state map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="208" column="31" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1add40018c388e8fb9f4d76a7df7546582" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1state__map__ex__row" kindref="compound">state_map_ex_row</ref> *</type>
        <definition>virtual const state_map_ex_row* rcppsw::patterns::fsm::base_fsm::state_map_ex</definition>
        <argsstring>(size_t)</argsstring>
        <name>state_map_ex</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>Gets the extended state map as defined in the derived class. </para>
        </briefdescription>
        <detaileddescription>
<para>A state machine only needs to return a state map using either <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a8e5583c34d8c99b092fb60e948748090" kindref="member">state_map()</ref> or <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1add40018c388e8fb9f4d76a7df7546582" kindref="member">state_map_ex()</ref> but not both.</para>
<para><simplesect kind="return"><para>The row corresponding to the passed in state in the state map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="220" column="34" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ab5d7452fd568e2beef757bcb56649ad9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::update_state</definition>
        <argsstring>(uint8_t new_state)</argsstring>
        <name>update_state</name>
        <param>
          <type>uint8_t</type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="198" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a649d8221e3eb33423fb6a8217adacb61" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::event_data</definition>
        <argsstring>(std::unique_ptr&lt; class event_data &gt; event_data)</argsstring>
        <name>event_data</name>
        <param>
          <type>std::unique_ptr&lt; class <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1event__data" kindref="compound">event_data</ref> &gt;</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="239" column="8" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a9a700eb0ac5a3592067311b8e79a85c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::state_engine_map</definition>
        <argsstring>(void)</argsstring>
        <name>state_engine_map</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="237" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afe47d37f4e808c6a3b72a409512bbeac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rcppsw::patterns::fsm::base_fsm::state_engine_map_ex</definition>
        <argsstring>(void)</argsstring>
        <name>state_engine_map_ex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="238" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a software-based state machine. </para>
    </briefdescription>
    <detaileddescription>
<para>The FSM paradigm uses <emphasis>MEMBER</emphasis> function pointers, so you always need to initialize the state map cleanly WITHOUT copy construction (even inside copy constructors), otherwise all copies of the object will use the other object&apos;s state map (default behavior in default copy constructor). If the source object is destructed, then you will get a segfault due to dangling pointers or a &quot;pure virtual function called&quot; error.</para>
<para>Thus, all <ref refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm" kindref="compound">base_fsm</ref> derived classes MUST implement the copy constructor, or delete it in order to ensure proper operation in all cases. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>rcppsw::er::client&lt; base_fsm &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
      <node id="1">
        <label>rcppsw::patterns::fsm::base_fsm</label>
        <link refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rcppsw::multithread::mt_fsm</label>
        <link refid="classrcppsw_1_1multithread_1_1mt__fsm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>rcppsw::patterns::fsm::hfsm</label>
        <link refid="classrcppsw_1_1patterns_1_1fsm_1_1hfsm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>rcppsw::er::client&lt; base_fsm &gt;</label>
        <link refid="classrcppsw_1_1er_1_1client"/>
      </node>
      <node id="1">
        <label>rcppsw::patterns::fsm::base_fsm</label>
        <link refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" line="72" column="34" bodyfile="/home/jharwell/git/rcppsw/include/rcppsw/patterns/fsm/base_fsm.hpp" bodystart="72" bodyend="255"/>
    <listofallmembers>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a6b0ab3c20b50882d7e145bfbabffed92" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>base_fsm</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a02f75749183246e300210cd6a7a308d8" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>base_fsm</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a6f82007aff2abc0424c3aea112f4d338" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>client</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac240653183e3bc50cdd7b94ab573dfdd" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>client</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a857086bfbdd54b829cf2e839a8f78587" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>current_state</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8dbae2145314c17f94296af27e986ec7" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>env_verify</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ae81d3007d6d0e4aa1b6c9521ae59455f" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a7e7f9c272b0db4c1a8766f6f76cb0585" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a649d8221e3eb33423fb6a8217adacb61" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1af18293d39b40e1e2c60a81cded8a9e5a" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data_hold</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a82ea8aed531c4b4951b095bb863f091f" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data_hold</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a70d0b834423157fe8b09690afa80a83d" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>event_data_release</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1aa7fbf7096bfea773455ec2f9265e0b1b" prot="protected" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>external_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adb6921a6426dec4efed0e16cba15cbe4" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>external_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a00a0983368a370e3a807a831c24709f4" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>generated_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a9b5897b7785ebcabce2a118daf57b4a0" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>has_generated_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a28dcbf6903171b491f9f49e76b380a47" prot="public" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>init</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ad97c446c7cb456dabbcc93b96b8076c5" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>initial_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a585739cca322eda48b2d788e16cb36a3" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>inject_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a5f3eb45a6e8c0d402e8ba3fbe18027eb" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>inject_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afeb001abffdcc060bde5d9bbdfd1af37" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>internal_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ab6ab7bbe02e3f0bcdba23e6547d8afa5" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>internal_event</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a22ed6eb5646dd2bfcdfd29effb44c895" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>last_state</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fb3fcd567a3f7e65bbf8938ab5e8db7" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4fca204898963d5d8ecb91e00cd84b88" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>logfile_set</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a6b752123f721497e565e028571a1a37b" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>logger</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab40243dbcdd2e695bace0708788d7ee2" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>logger_name</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ae3f3005bc9b32db29bd751bc8511d72a" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>logging_init</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a6cb2aa2c1779818d8fb9c23cb54aa4b6" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_current_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1aba9fe0f6d11676eac808c3710cdf99ad" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_event_data</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adc9b11d363eaa79bf3f4a7fdd3e7c318" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_event_data_hold</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ad77b861d41f5ff8500c62a72d7731f9a" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_event_generated</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a2d0fb0041a3c1aec61da7b4b25c17b89" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_initial_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a92821fd9f0f1b124b2b64fe2ae4d92ca" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_last_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a5099ed2895571be5932912083385a653" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_next_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afe6ea0c6bf8b5c1e2184e8617e2722fa" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>m_previous_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1abc6dd4426ea4b66799d82084301e5d56" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>max_states</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1adb49398f97c7d43ebf86162231003ff4" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>mc_max_states</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a8e8addf09ab47c9ff19b70ebb72d614a" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>mdc_add</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ab8d0b0946f73dc6ed3c0f6c6981f7a93" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>mdc_rm</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a4b552cb8803ac3cc5c96a6a97deaaec0" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>ndc_do_pop</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a2b3dbedbca4f96b9e2e2ce91fb3bac3d" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>ndc_do_push</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a363425a1ba6f260851673e2f1b78efee" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>next_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a2ace41a1c2879201b362ede5898e0047" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>next_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a7a56e00ed9b58320416ff440c173fead" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>operator=</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1ac18e66461acd38f97e1cefe7611ca9fb" prot="public" virt="non-virtual" ambiguityscope="client&lt; base_fsm &gt;::"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>operator=</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a0d83a8f65d17d2932608bc33aa015581" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>previous_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a3c5718316ff2a98a9459307fcf4c148e" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_engine</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a9a700eb0ac5a3592067311b8e79a85c3" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_engine_map</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afe47d37f4e808c6a3b72a409512bbeac" prot="private" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_engine_map_ex</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a18b15e2f252daaf1e15ee0ea502b5370" prot="protected" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_engine_step</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1afddb540ea0cc710481164d8a2890fcae" prot="protected" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_engine_step</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a8e5583c34d8c99b092fb60e948748090" prot="protected" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_map</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1add40018c388e8fb9f4d76a7df7546582" prot="protected" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>state_map_ex</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1ab5d7452fd568e2beef757bcb56649ad9" prot="protected" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>update_state</name></member>
      <member refid="classrcppsw_1_1patterns_1_1fsm_1_1base__fsm_1a14bebe9ef1225637a95971f17734eecd" prot="public" virt="non-virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>~base_fsm</name></member>
      <member refid="classrcppsw_1_1er_1_1client_1a0e6a2aa2f2d0af9352f3ca3044e015d0" prot="public" virt="virtual"><scope>rcppsw::patterns::fsm::base_fsm</scope><name>~client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
